import { mockGetConnection, mockCloseConnectionPool } from 'trophy-rds-connection/index.mjs';
import { retrieveExercise, deleteExercise } from 'trophy-database-operations/ExerciseOperations.mjs';
import { translateExerciseSQLRowToJSON } from 'trophy-exercise-data-processing/SQLJSONTranslator.mjs';
import { ERROR } from 'trophy-common-utils/Errors.mjs';
import { compareExerciseId, compareUserId } from 'trophy-common-utils/IdComparators.mjs';
import { STATUS_CODES } from 'trophy-common-utils/StatusCodes.mjs';

// Utility function to check if a value is null or undefined
function isNullOrUndefined(value) {
    return value === undefined || value === null;
}

export const handler = async function (event, context) {
    let connection;
    try {
        // Open up DB connection
        connection = await mockGetConnection();

        // Check if pathParameters are undefined or null
        if (isNullOrUndefined(event.pathParameters)) {
            throw new Error(ERROR.ERROR_PATH_PARAMETER_UNDEFINED_NULL);
        }

        // Extract and validate userId from pathParameters
        const userId = event.pathParameters.userId;
        if (isNullOrUndefined(userId)) {
            console.error("User ID data value:", userId);
            throw new Error(ERROR.ERROR_INVALID_LAMBDA_PARAMETER_UNDEFINED_NULL);
        }

        // Extract and validate exerciseId from pathParameters
        const exerciseId = event.pathParameters.exerciseId;
        if (isNullOrUndefined(exerciseId)) {
            console.error("Exercise ID data value:", exerciseId);
            throw new Error(ERROR.ERROR_INVALID_LAMBDA_PARAMETER_UNDEFINED_NULL);
        }

        // Retrieve exercise details from the database
        const retrievedExerciseRow = await retrieveExercise(exerciseId, connection);
        const retrievedExercise = translateExerciseSQLRowToJSON(retrievedExerciseRow);

        // Extract user_id and exercise_id from the retrieved exercise object
        const retrievedUserId = retrievedExercise.user_id;
        const retrievedExerciseId = retrievedExercise.exercise_id;

        // Check if the userId matches the user_id from the retrieved exercise
        if (!compareUserId(userId, retrievedUserId)) {
            console.error(`User with userId ${userId} does not have permission to view this Exercise. Likely due to mismatching user id's`);
            throw new Error(ERROR.ERROR_RETRIEVE_EXERCISE_FAILED_PERMISSION_DENIED);
        }

        // Check if the exerciseId matches the exercise_id from the retrieved exercise
        if (!compareExerciseId(exerciseId, retrievedExerciseId)) {
            console.error(`Provided exerciseId ${exerciseId} does not match retrieved exerciseId ${retrievedExerciseId}`);
            throw new Error(ERROR.ERROR_RETRIEVE_EXERCISE_FAILED_ID_MISMATCH);
        }

        // Delete the exercise from the database
        const deleteSuccessful = await deleteExercise(retrievedExerciseId, connection);

        // Return appropriate response based on the deletion result
        if (deleteSuccessful) {
            return {
                statusCode: 200,
                body: JSON.stringify({
                    message: 'Function executed successfully'
                })
            };
        } else {
            return {
                statusCode: 400,
                body: JSON.stringify({
                    message: `Function failed deletion for the exerciseId: ${exerciseId}`
                })
            };
        }

    } catch (error) {
        // Log the error details
        console.error(error);

        // Initialize default error response values
        let statusCode = 500;
        let message = STATUS_CODES.STATUS_CODE_DEFAULT;

        // Determine specific error message and status code
        switch (error.message) {
            case ERROR.ERROR_INVALID_LAMBDA_PARAMETER_UNDEFINED_NULL:
            case ERROR.ERROR_RETRIEVE_EXERCISE_FAILED_PERMISSION_DENIED:
            case ERROR.ERROR_PATH_PARAMETER_UNDEFINED_NULL:
                statusCode = 400;
                message = STATUS_CODES.STATUS_CODE_4XX;
                break;
        }

        // Return error response
        return {
            statusCode: statusCode,
            body: JSON.stringify({
                exerciseId: event.pathParameters?.exerciseId,
                userId: event.pathParameters?.userId,
                message: message
            })
        };
    } finally {
        // Ensure the connection is released and pool is closed
        if (connection) {
            connection.release();
            await mockCloseConnectionPool();
        }
    }
};
