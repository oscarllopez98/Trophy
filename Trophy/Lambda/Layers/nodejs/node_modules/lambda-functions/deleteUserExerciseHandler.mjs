import { getConnection, closeConnection } from 'trophy-rds-connection/index.mjs';
import { retrieveExercise, deleteExercise } from 'trophy-database-operations/ExerciseOperations.mjs';
import { translateExerciseSQLRowToJSON } from 'trophy-exercise-data-processing/SQLJSONTranslator.mjs';
import { ERROR } from 'trophy-common-utils/Errors.mjs';
import { compareExerciseId, compareUserId } from 'trophy-common-utils/IdComparators.mjs';
import { STATUS_CODES } from 'trophy-common-utils/StatusCodes.mjs';

export const handler = async function (event, context) {

    try {

        if (event.pathParameters === undefined || event.pathParameters === null) throw new Error(ERROR.ERROR_PATH_PARAMETER_UNDEFINED_NULL);

        // Throw error if userId is undefined or null
        const userId = event.pathParameters.userId;
        if (userId === undefined || userId === null) {
            console.log("User ID data value:", userId);
            console.log("User ID data type:", typeof userId);
            throw new Error(`${ERROR.ERROR_INVALID_LAMBDA_PARAMETER_UNDEFINED_NULL}`);
        }

        // Throw error if exerciseId is undefined or null
        const exerciseId = event.pathParameters.exerciseId;
        if (exerciseId === undefined || exerciseId === null) {
            console.log("Exercise ID data value:", exerciseId);
            console.log("Exercise ID data type:", typeof exerciseId);
            throw new Error(`${ERROR.ERROR_INVALID_LAMBDA_PARAMETER_UNDEFINED_NULL}`);
        }

        // Open up DB connection
        let connection = await getConnection();

        // Call Retrieve for the Exercise that is wanted to be deleted
        let retrievedExerciseRow = await retrieveExercise(exerciseId, connection);
        let retrievedExercise =  translateExerciseSQLRowToJSON(retrievedExerciseRow);

        // Extract the user_id and exercise_id from the Exercise object
        let retrievedUserId = retrievedExercise.user_id;
        let retrievedExerciseId = retrievedExercise.exercise_id;

        // Throw error if userId !== exercise.userId
        if (!compareUserId(userId, retrievedUserId)) {
            console.log(`User with userId ${userId} does not have permission to view this Exercise. Likely due to mismatching user id's`);
            throw new Error(`${ERROR.ERROR_RETRIEVE_EXERCISE_FAILED_PERMISSION_DENIED}`);
        }

        // Throw error if exerciseId !== exercise.exerciseId
        if (!compareExerciseId(exerciseId, retrievedExerciseId)) {
            console.log(`Provided exerciseId ${exerciseId} does not match retrieved exerciseId ${retrievedExerciseId}`);
            throw new Error(`${ERROR.ERROR_RETRIEVE_EXERCISE_FAILED_ID_MISMATCH}`);
        }

        // Call Delete for the Exercise retrieved
        await deleteExercise(retrievedExerciseId, connection);

        // If successful, return 200 status code and exerciseId
        return {
            statusCode: 200,
            body: JSON.stringify({ 
                message: 'Function executed successfully' 
            })
        };

    } catch(error) {
        // Log error details
        console.log(error);
        // Throw error with Status Code message reflecting what happened
        let message = null;
        let statusCode = 500;

        // Determine which Status Code we have
        switch(error) {
            case ERROR.ERROR_INVALID_LAMBDA_PARAMETER_UNDEFINED_NULL: // Request Parameter is invalid
            case ERROR.ERROR_RETRIEVE_EXERCISE_FAILED_PERMISSION_DENIED: // User does not have permission to view Exercise
            case ERROR.ERROR_PATH_PARAMETER_UNDEFINED_NULL: // Path Parameter is invalid (undefined or null)
                message = STATUS_CODES.STATUS_CODE_4XX;
                statusCode = 400;
                break;
            default:
                message = STATUS_CODES.STATUS_CODE_DEFAULT;
                statusCode = 400;
                break;
        }

        // Return body with error status code, error message, and any other details needed
        return {
            statusCode: statusCode,
            body: JSON.stringify({ 
                exerciseId: event.pathParameters.exerciseId,
                userId: event.pathParameters.userId,
                message: message
            })
        };
    } finally {
        // Close database connection
        await closeConnection();
    }
}