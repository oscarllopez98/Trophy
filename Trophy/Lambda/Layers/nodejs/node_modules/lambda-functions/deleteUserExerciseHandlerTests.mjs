import { handler } from "lambda-functions/deleteUserExerciseHandler.mjs"
import { ERROR } from "trophy-common-utils/TestErrors.mjs";

const eventUserWithPermissions = {
    pathParameters: {
        exerciseId: "23BD012709F74B62AA4158DC97BFF5EF",
        userId: "4bf0e7ef-cd19-4b0c-b9a2-e946c58e01d1"
    }
}
const eventUserWithoutPermissions = {
    pathParameters: {
        exerciseId: "43043504-7116-4211-b83e-686e18520d29",
        userId: "4bf0e7ef-cd19-4b0c-b9a2-idoesnotwork"
    }
}
const eventUserWithInvalidExercise = {
    pathParameters: {
        exerciseId: "43043504-7116-4211-b83e-ibadexercise",
        userId: "4bf0e7ef-cd19-4b0c-b9a2-e946c58e01d1"
    }
}
const eventEmpty = {
}

/**
 * Tests the deletion of a user's exercise.
 * 
 * @param {object} event - The event object containing the request details.
 * @returns {Promise<void>} A promise that resolves after the test completes.
 * @throws {Error} If the handler function returns a non-200 status code or if there's an error during the test.
 */
const testDeleteUserExercise = async (event) => {
    console.time("test");
    // Validate that event is not undefined or null
    let response = await handler(event);
    if (response.statusCode !== 200) throw new Error(`${ERROR.ERROR_LAMBDA_FUNCTION_FAILED_STATUS_CODE} ${response.statusCode} 
    with message: ${JSON.parse(response.body).message}`);
    else {
        // Parse the body to retrieve the message value
        const message = JSON.parse(response.body).message;

        // Pretty print the exercise value
        const prettyMessageValue = JSON.stringify(message, null, 2);

        console.log(prettyMessageValue);
        console.timeEnd("test");

        console.log("Test Passed! with time");
    }
}

await testDeleteUserExercise(eventUserWithPermissions);