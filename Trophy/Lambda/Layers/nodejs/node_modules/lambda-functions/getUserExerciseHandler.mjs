import { getConnection, closeConnection } from 'trophy-rds-connection/index.mjs';
import { retrieveExercise } from 'trophy-database-operations/ExerciseOperations.mjs';
import { translateExerciseSQLRowToJSON } from 'trophy-exercise-data-processing/SQLJSONTranslator.mjs';
import { ERROR } from 'trophy-common-utils/Errors.mjs';

export const handler = async function (event, context) {
    try {
        // Parse the JSON body from the event
        const requestBody = JSON.parse(event.body); // For actual usage
        // const requestBody = event.body; //For lambda test events

        // Throw error if userId is undefined or null
        const userId = event.pathParameters.userId;
        if (userId === undefined || userId === null) {
            console.log("User ID data value:", userId);
            console.log("User ID data type:", typeof userId);
            throw new Error(`${ERROR.ERROR_INVALID_LAMBDA_PARAMETER_UNDEFINED_NULL}`);
        }
        
        // Throw error if exerciseId is undefined or null
        const exerciseId = event.pathParameters.exerciseId;
        if (exerciseId === undefined || exerciseId === null) {
            console.log("Exercise ID data value:", exerciseId);
            console.log("Exercise ID data type:", typeof exerciseId);
            throw new Error(`${ERROR.ERROR_INVALID_LAMBDA_PARAMETER_UNDEFINED_NULL}`);
        }

        // Confirmed values needed from API Gateway are valid and usable

        // Get/Open DB Connection
        const connection = await getConnection();

        // Call Retrieve Exercise function
        const exerciseRow = await retrieveExercise(exerciseId, connection);

        // Throw error, if there were no entries found
        if (exerciseRow === null) {
            throw new Error(`${ERROR.ERROR_RETRIEVE_EXERCISE_FAILED_NOT_FOUND} using:
                exerciseId: ${exerciseId}
                userId: ${userId}`);
        }

        // Translate the Exercise Row into a JSON format
        const exercise = translateExerciseSQLRowToJSON(exerciseRow);

        // Throw error if userId !== exercise.userId


        // Return body with success status code, translated Exercise object

    } catch(error) {
        // Log function details (e.g. userId, exerciseId)

        // Log error details

        // Return body with error status code, error message, and any other details needed

    } finally {
        // Close the DB connection
        await closeConnection();
    }
}