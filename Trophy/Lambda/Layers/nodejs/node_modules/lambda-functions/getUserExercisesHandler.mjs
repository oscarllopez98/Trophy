import { getConnectionV2, closeConnectionPool } from "trophy-rds-connection/index.mjs" 
import { retrieveLimitedExercisesForUserId } from "trophy-database-operations/ExercisesOperations.mjs";
import { compareUserId } from "trophy-common-utils/IdComparators.mjs";
import { translateExerciseSQLRowToJSON } from "trophy-exercise-data-processing/SQLJSONTranslator.mjs";
import { prepareMultipleExerciseResponses } from "trophy-common-utils/PrepareAPIResponse.mjs";
import { ERROR } from "trophy-common-utils/Errors.mjs";

/**
 * Lambda function handler for retrieving limited exercises for a specified user.
 * This function performs the following steps:
 * 1. Validates the incoming event and path parameters.
 * 2. Retrieves exercise records for the given user ID from the database.
 * 3. Translates SQL rows to JSON format.
 * 4. Ensures the user ID in the retrieved records matches the requested user ID.
 * 5. Prepares the exercise data for the API response.
 * 6. Returns a JSON response with the exercise data or appropriate error messages.
 *
 * @param {Object} event - The event object containing request data.
 * @param {Object} context - The context object containing Lambda runtime information.
 * @returns {Object} - The HTTP response object with statusCode and body.
 */
export const handler = async function (event, context) {

    try {
        // Check if event is valid
        if (event === undefined || event === null) {
            return {
                statusCode: 400,
                body: JSON.stringify({ 
                    message: ERROR.ERROR_INVALID_LAMBDA_EVENT_UNDEFINED_NULL
                })
            };       
        }
        // Check if pathParameters is valid
        if (event.pathParameters === undefined || event === null) {
            return {
                statusCode: 400,
                body: JSON.stringify({ 
                    message: ERROR.ERROR_INVALID_LAMBDA_PATH_PARAMETERS_UNDEFINED_NULL
                })
            };        
        }

        // Throw error if userId is undefined or null
        const userId = event.pathParameters.userId;
        if (userId === undefined || userId === null) {
            console.error("User ID data value:", userId);
            console.error("User ID data type:", typeof userId);
            throw new Error(`${ERROR.ERROR_INVALID_LAMBDA_PARAMETER_UNDEFINED_NULL}`);
        }

        // Call Retrieve Exercises function
        var exercisesRows = null;
        try {
            exercisesRows = await retrieveLimitedExercisesForUserId(userId, getConnectionV2);
        } catch(error) {
            console.warn(error);
        }

        // If no results were found, we can return a success response but no Exercise rows
        if (exercisesRows === null) {
            return {
                statusCode: 200,
                body: JSON.stringify({
                    exercises: [],
                    message: "Function executed successfully. WARN: No Exercises Found."
                })
            }
        } 
        // Else, we can translate each Exercise SQL Row into its own JSON object
        else {

            try {
                // Translate
                const translatedExercises = exercisesRows.map(translateExerciseSQLRowToJSON);

                // Throw error if first userId !== exercise.userId
                if (!compareUserId(userId, translatedExercises[0].user_id)) {
                    console.error(`User with userId ${userId} does not have permission to view these Exercises. Likely due to mismatching user id's`);
                    throw new Error(`${ERROR.ERROR_RETRIEVE_EXERCISE_FAILED_PERMISSION_DENIED}`);
                }

                // Prepare the Exercises for the response
                const response = await prepareMultipleExerciseResponses(translatedExercises, getConnectionV2);

                // Filter the results
                const exercisesWithoutErrors = response
                    .filter(item => item.attributeErrors.length === 0)
                    .map(item => item.exerciseObject);

                // Return a 200 response and retrieved Exercises entry
                return {
                    statusCode: 200,
                    body: JSON.stringify({ 
                        exercises: exercisesWithoutErrors,
                        message: 'Function executed successfully' 
                    })
                };
            } catch (error) {
                return {
                    statusCode: 400,
                    body: JSON.stringify({
                        userId: userId,
                        message: error.message,
                        stack: error.stack
                    })
                };
            }
        }

    } catch(error) {
        // Log function details (e.g. userId)
        console.error("Failed with userId", event.pathParameters.userId);

        // Log error details
        console.error(error.message);

        // Return body with error status code, error message, and any other details needed
        return {
            statusCode: 500,
            body: JSON.stringify({ 
                userId: event.pathParameters.userId,
                message: 'Internal server error' 
            })
        };
    } finally {
        // Close the DB connection
        await closeConnectionPool();
    }

}