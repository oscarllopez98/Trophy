import { validatePathParametersUserIdWithEvent } from "../trophy-common-utils/PathParameterValidator.mjs"
import { callGptApi, processGptOutput } from "../trophy-gpt-processing/index.mjs";
import { ERROR } from "../trophy-common-utils/Errors.mjs";

/**
 * AWS Lambda handler function to process user exercise input through the OpenAI GPT API.
 * 
 * @param {Object} event - The event object provided by AWS Lambda, containing request data.
 * @param {Object} context - The context object provided by AWS Lambda, containing runtime information.
 * @returns {Object} - The response object with a status code and body.
 */
export const handler = async function (event, context) {

    try {
        // Validate we can access the user id property the user id from the path
        validatePathParametersUserIdWithEvent(event);

        // Retrieve the userId
        const userId = event.pathParameters.userId;

        // Verify 'userInput' pathParameter exists and is not null, throw error if not
        if (event.pathParameters.userId === undefined || event.pathParameters === null) throw new Error(`${ERROR.ERROR_INVALID_LAMBDA_PARAMETER_UNDEFINED_NULL}`);

        // Request body for our user input
        let requestBody;
        try {
            // Try to parse the body JSON
            requestBody = JSON.parse(event.body);
        } catch(error) {
            throw new Error(`${ERROR.ERROR_INVALID_LAMBDA_EVENT_BODY_JSON}`);
        }

        // Check if requestBody is not null and has userInput
        if (!requestBody || typeof requestBody.userInput === 'undefined' || requestBody.userInput === null) {
            throw new Error(`${ERROR.ERROR_INVALID_LAMBDA_EVENT_BODY_UNDEFINED_NULL} with details:
                requestBody data value: ${requestBody}
                userInput data type: ${typeof requestBody.userInput}
                userInput data value: ${requestBody.userInput}
            `);
        }

        // Safely store the user input
        const userInput = requestBody.userInput;

        // Get the GPT API response + Process the response
        const gptResponse = await callGptApi(userInput);
        const processedJson = processGptOutput(gptResponse);

        // Return success status code with message and exercise object
        return {
            statusCode: 200,
            body: JSON.stringify({
                message: 'Input processed successfully through GPT',
                exercise: processedJson.exercise
            })
        };

    } catch(error) {
        // If error, return internal failure status code with error details
        return {
            statusCode: 500,
            body: JSON.stringify({
                event: event,
                message: error.message,
                stack: error.stack
            })
        };
    } finally {

    }

}