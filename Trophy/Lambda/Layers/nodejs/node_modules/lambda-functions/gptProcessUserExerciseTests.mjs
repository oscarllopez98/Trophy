import { ERROR} from '../trophy-common-utils/TestErrors.mjs'
import { handler } from 'lambda-functions/gptProcessUserExercise.mjs' 

const invalidEvent = async function() {
    // Set event and call handler
    let event;
    let result = await handler(event);

    // Parse JSON
    const parsedJSON = result.statusCode;

    // Pass/Fail
    let failedStatusCode = parsedJSON.statusCode === 500;
    console.log("invalidEvent Test #1 Pass Status:", failedStatusCode);

    // Set event and call handler
    event = null;
    result = handler(event);

    // Parse JSON
    parsedJSON = result.statusCode;

    // Pass/Fail
    failedStatusCode = parsedJSON.statusCode === 500;
    console.log("invalidEvent Test #2 Pass Status:", failedStatusCode);
}

const invalidPathParameters = async function() {
    // Set event and call handler
    let event = { pathParameter };
    let result = await handler(event);

    // Parse JSON
    const parsedJSON = result.statusCode;

    // Pass/Fail
    let failedStatusCode = parsedJSON.statusCode === 500;
    console.log("invalidPathParameters Test #1 Pass Status:", failedStatusCode);

    // Set event and call handler
    event = { pathParameter: null };
    result = handler(event);

    // Parse JSON
    parsedJSON = result.statusCode;

    // Pass/Fail
    failedStatusCode = parsedJSON.statusCode === 500;
    console.log("invalidPathParameters Test #2 Pass Status:", failedStatusCode);
}

const invalidUserIdProperty = async function() {
    // Set event and call handler
    let event = { pathParameter: { userId } };
    let result = await handler(event);

    // Parse JSON
    const parsedJSON = result.statusCode;

    // Pass/Fail
    let failedStatusCode = parsedJSON.statusCode === 500;
    console.log("invalidUserIdProperty Test #1 Pass Status:", failedStatusCode);

    // Set event and call handler
    event = { pathParameter: { userId: null } };
    result = handler(event);

    // Parse JSON
    parsedJSON = result.statusCode;

    // Pass/Fail
    failedStatusCode = parsedJSON.statusCode === 500;
    console.log("invalidUserIdProperty Test #2 Pass Status:", failedStatusCode);
}

const validUserIdProperty = async function() {
    // Set event and call handler
    let event = { 
        pathParameters: { 
            userId: "4bf0e7ef-cd19-4b0c-b9a2-e946c58e01d1",
        },
        body: JSON.stringify({
            userInput: `I played soccer for 2 hours.`
        })
    };

    let result = await handler(event);
  
    // Pass/Fail
    let failedStatusCode = result.statusCode === 500;
    if (failedStatusCode) {
        console.log(result.statusCode);
        console.log(JSON.parse(result.body).message);
    } else {
        // Parse JSON
        let parsedJSON = JSON.parse(result.body);
        console.log("Exercise\n",parsedJSON.exercise);
        console.log("Test Passed");
    }
}


// Test invalid event scenarios
// invalidEvent();
// invalidPathParameters();
// invalidUserIdProperty();
validUserIdProperty();