import { ERROR } from '../trophy-common-utils/Errors.mjs';

/**
 * Checks if the provided variable is a valid JSON object.
 * 
 * @param {Object} JSONObject The variable to be checked.
 * @returns {boolean} True if the variable is a valid JSON object, false otherwise.
 */
const isValidJSONObject = (JSONObject) => {
    return typeof JSONObject === 'object' && JSONObject !== null && !Array.isArray(JSONObject);
}

/**
 * Validates the exercise attribute JSON object by checking if each attribute exists and passes its respective validation function.
 * 
 * @param {Object} exerciseAttributeJSON - The JSON object containing exercise attribute information.
 * @returns {boolean} Returns true if the exercise attribute JSON is valid, otherwise returns false.
 */
export const validateExerciseAttributeJSONs = (exerciseAttributeJSON) => {
    if (exerciseAttributeJSON.distance) {validateDistanceAttributeJSON(exerciseAttributeJSON);}

    if (exerciseAttributeJSON.time) {validateTimeAttributeJSON(exerciseAttributeJSON);}
    
    if (exerciseAttributeJSON.weight) {validateWeightAttributeJSON(exerciseAttributeJSON);}
    
    if (exerciseAttributeJSON.reps) {validateRepsAttributeJSON(exerciseAttributeJSON);}
    
    if (exerciseAttributeJSON.sets) {validateSetsAttributeJSON(exerciseAttributeJSON);}
    
    if (exerciseAttributeJSON.intensity) {validateIntensityAttributeJSON(exerciseAttributeJSON);}
    
    if (exerciseAttributeJSON.level) {validateLevelAttributeJSON(exerciseAttributeJSON);}

    // If we made it here, no errors, return true
    return true;
}


/**
 * Validates a user-defined attribute JSON object.
 * 
 * @param {Object} userDefinedAttributeJSON The JSON object representing the user-defined attribute to be validated.
 * @returns {boolean} True if the user-defined attribute JSON object is valid, false otherwise.
 */
export const validateUserDefinedAttributeJSON = (userDefinedAttributeJSON) => {

    // Validate JSON is Object type
    const validJSONObject = isValidJSONObject(userDefinedAttributeJSON);

    if (!validJSONObject) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof userDefinedAttributeJSON)}`);
    }

    // Validate JSON has appropriate properties and they are not null or undefined
    const validProperties = userDefinedAttributeJSON?.user_defined_attribute?.name !== undefined && userDefinedAttributeJSON?.user_defined_attribute?.name !== null
        && userDefinedAttributeJSON?.user_defined_attribute?.value !== undefined && userDefinedAttributeJSON?.user_defined_attribute?.value !== null;

    if (!validProperties) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Name: ${userDefinedAttributeJSON?.user_defined_attribute?.name}
            Value: ${userDefinedAttributeJSON?.user_defined_attribute?.value}`);
    }

    // Validate JSON properties are of the proper type and length
    const name = userDefinedAttributeJSON?.user_defined_attribute?.name;
    const value = userDefinedAttributeJSON?.user_defined_attribute?.value;

    const validPropertyTypes = typeof name !== 'object' && name !== null && typeof value !== 'object' && value !== null;

    if (!validPropertyTypes) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Name type: ${(typeof name)}
            Value type: ${(typeof value)}`);
    }

    const validPropertyLengths = name.length <= 20 && value.length <= 10;
    const validPropertyLengthsSubceed = name.length > 0 && value.length > 0;

    if (!validPropertyLengths) throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES_VALUES_EXCEEDS}. 
        Actual value: 
            Name length: ${name.length}
            Value length: ${value.length}`
        );
    else if (!validPropertyLengthsSubceed) throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES_VALUES_SUBCEEDS}. 
        Actual value: 
            Name length: ${name.length}
            Value length: ${value.length}`
        );


    return validJSONObject && validProperties && validPropertyTypes && validPropertyLengths && validPropertyLengthsSubceed;
}



/**
 * Validates a distance attribute JSON object.
 * 
 * @param {Object} distanceAttributeJSON The JSON object representing the distance attribute to be validated.
 * @returns {boolean} True if the distance attribute JSON object is valid, false otherwise.
 */
export const validateDistanceAttributeJSON = (distanceAttributeJSON) => {

    // Validate JSON is Object type
    if (!isValidJSONObject(distanceAttributeJSON)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof distanceAttributeJSON)}`);
    }

    // Validate JSON has appropriate properties and they are not null or undefined
    if (!(distanceAttributeJSON?.distance?.value !== undefined && distanceAttributeJSON?.distance?.value !== null
        && distanceAttributeJSON?.distance?.unit !== undefined && distanceAttributeJSON?.distance?.unit !== null)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Value: ${distanceAttributeJSON?.distance?.value}
            Unit: ${distanceAttributeJSON?.distance?.unit}`);
    }

    // Validate JSON properties are of the proper type
    const value = distanceAttributeJSON?.distance?.value;
    const unit = distanceAttributeJSON?.distance?.unit;

    if (!(typeof value === 'string' || typeof value === 'number')) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value type: ${(typeof value)} (value: ${value})`);
    }

    // Attempt to parse value as float
    const parsedValue = parseFloat(value);

    if (isNaN(parsedValue) || typeof parsedValue !== 'number' || !isFinite(parsedValue)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value cannot be parsed as a float: ${(typeof value)} (value: ${value})`);
    }

    // Validate property lengths
    if (!(parsedValue.toFixed(2).length > 0 && unit.length > 0)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES_VALUES_EXCEEDS}. 
        Actual value: 
            Value length: ${parsedValue.length}
            Unit length: ${unit.length}`);
    } else if (!(parsedValue.toFixed(2).length > 0 && unit.length > 0)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES_VALUES_SUBCEEDS}. 
        Actual value: 
            Value length: ${parsedValue.length}
            Unit length: ${unit.length}`);
    }

    return true;
}


/**
 * Validates a time attribute JSON object.
 * 
 * @param {Object} timeAttributeJSON The JSON object representing the time attribute to be validated.
 * @returns {boolean} True if the time attribute JSON object is valid, false otherwise.
 */
export const validateTimeAttributeJSON = (timeAttributeJSON) => {

    // Validate JSON is Object type
    if (!isValidJSONObject(timeAttributeJSON)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof timeAttributeJSON)}`);
    }

    // Validate JSON has appropriate properties and they are not null or undefined
    if (!(timeAttributeJSON?.time?.value !== undefined && timeAttributeJSON?.time?.value !== null)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Value: ${timeAttributeJSON?.time?.value}`);
    }

    // Validate JSON properties are of the proper type
    const value = timeAttributeJSON?.time?.value;

    if (!(typeof value === 'number')) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value type: ${(typeof value)} (value: ${value})`);
    }

    // Validate JSON value are within allowed bounds
    if (!(value < 86400)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES_VALUES_EXCEEDS}
            Actual value:
                Value: ${value}`);
    }
    else if (!(value > 0)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES_VALUES_SUBCEEDS}
        Actual value:
            Value: ${value}
        `);
    }

    return true;
}


/**
 * Validates a sets attribute JSON object.
 * 
 * @param {Object} setsAttributeJSON The JSON object representing the sets attribute to be validated.
 * @returns {boolean} True if the sets attribute JSON object is valid, false otherwise.
 */
export const validateSetsAttributeJSON = (setsAttributeJSON) => {

    // Validate JSON is Object type
    if (!isValidJSONObject(setsAttributeJSON)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof setsAttributeJSON)}`);
    }

    // Validate JSON has appropriate properties and they are not null or undefined
    if (!(setsAttributeJSON?.sets?.value !== undefined && setsAttributeJSON?.sets?.value !== null)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Value: ${setsAttributeJSON?.sets?.value}`);
    }

    // Validate JSON properties are of the proper type
    const value = parseInt(setsAttributeJSON?.sets?.value); // Ensure value is parsed as an integer

    if (!(typeof value === 'number' && Number.isInteger(value) && value > 0)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value type: ${(typeof value)} (value: ${value})`);
    }

    // No length validation needed for integer values

    return true;
}


/**
 * Validates a reps attribute JSON object.
 * 
 * @param {Object} repsAttributeJSON The JSON object representing the reps attribute to be validated.
 * @returns {boolean} True if the reps attribute JSON object is valid, false otherwise.
 */
export const validateRepsAttributeJSON = (repsAttributeJSON) => {

    // Validate JSON is Object type
    if (!isValidJSONObject(repsAttributeJSON)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof repsAttributeJSON)}`);
    }

    // Validate JSON has appropriate properties and they are not null or undefined
    if (!(repsAttributeJSON?.reps?.value !== undefined && repsAttributeJSON?.reps?.value !== null)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Value: ${repsAttributeJSON?.reps?.value}`);
    }

    // Validate JSON properties are of the proper type
    const value = parseInt(repsAttributeJSON?.reps?.value); // Ensure value is parsed as an integer

    if (!(typeof value === 'number' && Number.isInteger(value) && value > 0)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value type: ${(typeof value)} (value: ${value})`);
    }

    // No length validation needed for integer values

    return true;
}


/**
 * Validates a weight attribute JSON object.
 * 
 * @param {Object} weightAttributeJSON The JSON object representing the weight attribute to be validated.
 * @returns {boolean} True if the weight attribute JSON object is valid, false otherwise.
 */
export const validateWeightAttributeJSON = (weightAttributeJSON) => {

    // Validate JSON is Object type
    if (!isValidJSONObject(weightAttributeJSON)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof weightAttributeJSON)}`);
    }

    // Validate JSON has appropriate properties and they are not null or undefined
    if (!(weightAttributeJSON?.weight?.value !== undefined && weightAttributeJSON?.weight?.value !== null
        && weightAttributeJSON?.weight?.unit !== undefined && weightAttributeJSON?.weight?.unit !== null)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Value: ${weightAttributeJSON?.weight?.value}
            Unit: ${weightAttributeJSON?.weight?.unit}`);
    }

    // Validate JSON properties are of the proper type
    const value = parseFloat(weightAttributeJSON?.weight?.value); // Ensure value is parsed as a number
    const unit = weightAttributeJSON?.weight?.unit;

    if (!(typeof value === 'number' && !isNaN(value) && value.toFixed(2).length <= 8 && typeof unit === 'string')) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value type: ${(typeof value)} (value: ${value})
            Unit type: ${(typeof unit)}`);
    }

    // Validate property lengths
    if (!(value.toFixed(2).length > 0 && unit.length > 0)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES_VALUES_EXCEEDS}. 
        Actual value: 
            Value length: ${value.length}
            Unit length: ${unit.length}`);
    } else if (!(value.toFixed(2).length > 0 && unit.length > 0)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES_VALUES_SUBCEEDS}. 
        Actual value: 
            Value length: ${value.length}
            Unit length: ${unit.length}`);
    }

    return true;
}


/**
 * Validates an intensity attribute JSON object.
 * 
 * @param {Object} intensityAttributeJSON The JSON object representing the intensity attribute to be validated.
 * @returns {boolean} True if the intensity attribute JSON object is valid, false otherwise.
 */
export const validateIntensityAttributeJSON = (intensityAttributeJSON) => {

    // Validate JSON is Object type
    if (!isValidJSONObject(intensityAttributeJSON)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof intensityAttributeJSON)}`);
    }

    // Validate JSON has appropriate properties and they are not null or undefined
    if (!(intensityAttributeJSON?.intensity?.value !== undefined && intensityAttributeJSON?.intensity?.value !== null)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Value: ${intensityAttributeJSON?.intensity?.value}`);
    }

    // Validate JSON properties are of the proper type
    const value = intensityAttributeJSON?.intensity?.value;

    if (!(typeof value === 'string')) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value type: ${(typeof value)} (value: ${value})`);
    }

    // No length validation needed for string values

    return true;
}


/**
 * Validates a level attribute JSON object.
 * 
 * @param {Object} levelAttributeJSON The JSON object representing the level attribute to be validated.
 * @returns {boolean} True if the level attribute JSON object is valid, false otherwise.
 */
export const validateLevelAttributeJSON = (levelAttributeJSON) => {

    // Validate JSON is Object type
    if (!isValidJSONObject(levelAttributeJSON)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof levelAttributeJSON)}`);
    }

    // Validate JSON has appropriate properties and they are not null or undefined
    if (!(levelAttributeJSON?.level?.value !== undefined && levelAttributeJSON?.level?.value !== null)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Value: ${levelAttributeJSON?.level?.value}`);
    }

    // Validate JSON properties are of the proper type
    const value = parseInt(levelAttributeJSON?.level?.value); // Ensure value is parsed as an integer

    if (!(typeof value === 'number' && Number.isInteger(value) && value > 0)) {
        throw new Error(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value type: ${(typeof value)} (value: ${value})`);
    }

    // No length validation needed for integer values

    return true;
}
