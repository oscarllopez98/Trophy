import { ERROR } from '../trophy-common-utils/Errors.mjs';

/**
 * Checks if the provided variable is a valid JSON object.
 * 
 * @param {Object} JSONObject The variable to be checked.
 * @returns {boolean} True if the variable is a valid JSON object, false otherwise.
 */
const isValidJSONObject = (JSONObject) => {
    return typeof JSONObject === 'object' && JSONObject !== null && !Array.isArray(JSONObject);
}

/**
 * Validates the exercise attribute JSON object by checking if each attribute exists and passes its respective validation function.
 * 
 * @param {Object} exerciseAttributeJSON - The JSON object containing exercise attribute information.
 * @returns {boolean} Returns true if the exercise attribute JSON is valid, otherwise returns false.
 */
export const validateExerciseAttributeJSONs = (exerciseAttributeJSON) => {

    const validDistanceAttribute = exerciseAttributeJSON.distance ? validateDistanceAttributeJSON(exerciseAttributeJSON) : true;
    const validTimeAttribute = exerciseAttributeJSON.time ? validateTimeAttributeJSON(exerciseAttributeJSON) : true;
    const validWeightAttribute = exerciseAttributeJSON.weight ? validateWeightAttributeJSON(exerciseAttributeJSON) : true;
    const validRepsAttribute = exerciseAttributeJSON.reps ? validateRepsAttributeJSON(exerciseAttributeJSON) : true;
    const validSetsAttribute = exerciseAttributeJSON.sets ? validateSetsAttributeJSON(exerciseAttributeJSON) : true;
    const validIntensityAttribute = exerciseAttributeJSON.intensity ? validateIntensityAttributeJSON(exerciseAttributeJSON) : true;
    const validLevelAttribute = exerciseAttributeJSON.level ? validateLevelAttributeJSON(exerciseAttributeJSON) : true;

    // If we made it here, no errors, return true
    return true;
}


/**
 * Validates a distance attribute JSON object.
 * 
 * @param {Object} distanceAttributeJSON The JSON object representing the distance attribute to be validated.
 * @returns {boolean} True if the distance attribute JSON object is valid, false otherwise.
 */
export const validateDistanceAttributeJSON = (distanceAttributeJSON) => {
    // Validate JSON is Object type
    const validJSONObject = isValidJSONObject(distanceAttributeJSON);

    // Validate JSON has appropriate properties and they are not undefined
    const validProperties = distanceAttributeJSON?.distance?.value !== undefined 
        && distanceAttributeJSON?.distance?.unit !== undefined;

    // Validate JSON properties are of the proper type
    const value = distanceAttributeJSON?.distance?.value;
    const unit = distanceAttributeJSON?.distance?.unit;

    const validPropertyTypes = typeof value === 'number' && typeof unit === 'string' && isFinite(value);

    const errors = [];
    if (!validJSONObject) errors.push(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof distanceAttributeJSON)}`);

    if (!validProperties) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Value: ${distanceAttributeJSON?.distance?.value}
            Unit: ${distanceAttributeJSON?.distance?.unit}`
        );
        
    if (!validPropertyTypes) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value type: ${(typeof value)}
            Unit type: ${(typeof unit)}`
        );

    if (errors.length > 0) {
        throw new Error(`Errors found during Distance Attribute JSON validation: ${errors.join('\n')}`);
    }

    return validJSONObject && validProperties && validPropertyTypes;
}

/**
 * Validates a time attribute JSON object.
 * 
 * @param {Object} timeAttributeJSON The JSON object representing the time attribute to be validated.
 * @returns {boolean} True if the time attribute JSON object is valid, false otherwise.
 */
export const validateTimeAttributeJSON = (timeAttributeJSON) => {
    // Validate JSON is Object type
    const validJSONObject = isValidJSONObject(timeAttributeJSON);

    // Validate JSON has appropriate properties and they are not null
    const validProperties = timeAttributeJSON?.time?.value !== undefined;

    // Validate JSON properties are of the proper type
    const value = timeAttributeJSON?.time?.value;

    const validPropertyTypes = typeof value === 'number';

    const errors = [];
    if (!validJSONObject) errors.push(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof timeAttributeJSON)}`);

    if (!validProperties) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Value: ${timeAttributeJSON?.time?.value}`
        );
        
    if (!validPropertyTypes) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value type: ${(typeof value)}`
        );

    if (errors.length > 0) {
        throw new Error(`Errors found during Time Attribute JSON validation: ${errors.join('\n')}`);
    }

    return validJSONObject && validProperties && validPropertyTypes;
}

/**
 * Validates a sets attribute JSON object.
 * 
 * @param {Object} setsAttributeJSON The JSON object representing the sets attribute to be validated.
 * @returns {boolean} True if the sets attribute JSON object is valid, false otherwise.
 */
export const validateSetsAttributeJSON = (setsAttributeJSON) => {
    // Validate JSON is Object type
    const validJSONObject = isValidJSONObject(setsAttributeJSON);

    // Validate JSON has appropriate properties and they are not null
    const validProperties = setsAttributeJSON?.sets?.value !== undefined;

    // Validate JSON properties are of the proper type
    const value = setsAttributeJSON?.sets?.value;

    const validPropertyTypes = typeof value === 'number';

    const errors = [];
    if (!validJSONObject) errors.push(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof setsAttributeJSON)}`);

    if (!validProperties) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Value: ${setsAttributeJSON?.sets?.value}`
        );
        
    if (!validPropertyTypes) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value type: ${(typeof value)}`
        );

    if (errors.length > 0) {
        throw new Error(`Errors found during Sets Attribute JSON validation: ${errors.join('\n')}`);
    }

    return validJSONObject && validProperties && validPropertyTypes;
}

/**
 * Validates a reps attribute JSON object.
 * 
 * @param {Object} repsAttributeJSON The JSON object representing the reps attribute to be validated.
 * @returns {boolean} True if the reps attribute JSON object is valid, false otherwise.
 */
export const validateRepsAttributeJSON = (repsAttributeJSON) => {
    // Validate JSON is Object type
    const validJSONObject = isValidJSONObject(repsAttributeJSON);

    // Validate JSON has appropriate properties and they are not null
    const validProperties = repsAttributeJSON?.reps?.value !== undefined;

    // Validate JSON properties are of the proper type
    const value = repsAttributeJSON?.reps?.value;

    const validPropertyTypes = typeof value === 'number';

    const errors = [];
    if (!validJSONObject) errors.push(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof repsAttributeJSON)}`);

    if (!validProperties) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Value: ${repsAttributeJSON?.reps?.value}`
        );
        
    if (!validPropertyTypes) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value type: ${(typeof value)}`
        );

    if (errors.length > 0) {
        throw new Error(`Errors found during Reps Attribute JSON validation: ${errors.join('\n')}`);
    }

    return validJSONObject && validProperties && validPropertyTypes;
}

/**
 * Validates a weight attribute JSON object.
 * 
 * @param {Object} weightAttributeJSON The JSON object representing the weight attribute to be validated.
 * @returns {boolean} True if the weight attribute JSON object is valid, false otherwise.
 */
export const validateWeightAttributeJSON = (weightAttributeJSON) => {
    // Validate JSON is Object type
    const validJSONObject = isValidJSONObject(weightAttributeJSON);

    // Validate JSON has appropriate properties and they are not null
    const validProperties = weightAttributeJSON?.weight?.value !== undefined 
        && weightAttributeJSON?.weight?.unit !== undefined;

    // Validate JSON properties are of the proper type
    const value = weightAttributeJSON?.weight?.value;
    const unit = weightAttributeJSON?.weight?.unit;

    const validPropertyTypes = typeof value === 'number' && typeof unit === 'string' && isFinite(value);

    const errors = [];
    if (!validJSONObject) errors.push(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof weightAttributeJSON)}`);

    if (!validProperties) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Value: ${weightAttributeJSON?.weight?.value}
            Unit: ${weightAttributeJSON?.weight?.unit}`
        );
        
    if (!validPropertyTypes) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value type: ${(typeof value)}
            Unit type: ${(typeof unit)}`
        );

    if (errors.length > 0) {
        throw new Error(`Errors found during Weight Attribute JSON validation: ${errors.join('\n')}`);
    }

    return validJSONObject && validProperties && validPropertyTypes;
}

/**
 * Validates a intensity attribute JSON object.
 * 
 * @param {Object} intensityAttributeJSON The JSON object representing the intensity attribute to be validated.
 * @returns {boolean} True if the intensity attribute JSON object is valid, false otherwise.
 */
export const validateIntensityAttributeJSON = (intensityAttributeJSON) => {
    // Validate JSON is Object type
    const validJSONObject = isValidJSONObject(intensityAttributeJSON);

    // Validate JSON has appropriate properties and they are not null
    const validProperties = intensityAttributeJSON?.intensity?.value !== undefined;

    // Validate JSON properties are of the proper type
    const value = intensityAttributeJSON?.intensity?.value;

    const validPropertyTypes = typeof value === 'string';

    const errors = [];
    if (!validJSONObject) errors.push(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof intensityAttributeJSON)}`);

    if (!validProperties) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Value: ${intensityAttributeJSON?.intensity?.value}`
        );
        
    if (!validPropertyTypes) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value type: ${(typeof value)}
            Unit type: ${(typeof unit)}`
        );

    if (errors.length > 0) {
        throw new Error(`Errors found during Intensity Attribute JSON validation: ${errors.join('\n')}`);
    }

    return validJSONObject && validProperties && validPropertyTypes;
}

/**
 * Validates a level attribute JSON object.
 * 
 * @param {Object} levelAttributeJSON The JSON object representing the level attribute to be validated.
 * @returns {boolean} True if the level attribute JSON object is valid, false otherwise.
 */
export const validateLevelAttributeJSON = (levelAttributeJSON) => {
    // Validate JSON is Object type
    const validJSONObject = isValidJSONObject(levelAttributeJSON);

    // Validate JSON has appropriate properties and they are not null
    const validProperties = levelAttributeJSON?.level?.value !== undefined;

    // Validate JSON properties are of the proper type
    const value = levelAttributeJSON?.level?.value;

    const validPropertyTypes = typeof value === 'number';

    const errors = [];
    if (!validJSONObject) errors.push(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof levelAttributeJSON)}`);

    if (!validProperties) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            Value: ${levelAttributeJSON?.level?.value}`
        );
        
    if (!validPropertyTypes) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual value: 
            Value type: ${(typeof value)}
            Unit type: ${(typeof unit)}`
        );

    if (errors.length > 0) {
        throw new Error(`Errors found during Level Attribute JSON validation: ${errors.join('\n')}`);
    }

    return validJSONObject && validProperties && validPropertyTypes;
}