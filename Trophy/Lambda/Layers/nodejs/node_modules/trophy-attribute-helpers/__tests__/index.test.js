// Import the functions to be tested
import { 
    validateDistanceAttributeJSON, 
    validateTimeAttributeJSON, 
    validateSetsAttributeJSON, 
    validateRepsAttributeJSON, 
    validateWeightAttributeJSON, 
    validateIntensityAttributeJSON, 
    validateLevelAttributeJSON,
    validateUserDefinedAttributeJSON
} from '../AttributeJSONValidation.mjs';

// Helper Functions
function assertEquals(expected, actual, message, input) {
    if (expected === actual) {
        console.log(`SUCCESS: ${message}`);
    } else {
        console.error(`FAILURE: ${message}. Expected ${expected}, but got ${actual}. Input: ${JSON.stringify(input)}`);
    }
}

function runTest(testName, testFunction) {
    console.log(`Running Test: ${testName}`);
    try {
        testFunction();
    } catch (error) {
        console.error(`Test ${testName} failed with error: ${error.message}`);
    }
}

// Valid Input Tests
function testValidDistanceAttribute() {
    const input = { distance: { value: 5.12, unit: 'km' } };
    const result = validateDistanceAttributeJSON(input);
    assertEquals(true, result, 'Valid Distance Attribute JSON', input);
}

function testValidTimeAttribute() {
    const input = { time: { value: 60 } };
    const result = validateTimeAttributeJSON(input);
    assertEquals(true, result, 'Valid Time Attribute JSON', input);
}

function testValidSetsAttribute() {
    const input = { sets: { value: 4 } };
    const result = validateSetsAttributeJSON(input);
    assertEquals(true, result, 'Valid Sets Attribute JSON', input);
}

function testValidRepsAttribute() {
    const input = { reps: { value: 10 } };
    const result = validateRepsAttributeJSON(input);
    assertEquals(true, result, 'Valid Reps Attribute JSON', input);
}

function testValidWeightAttribute() {
    const input = { weight: { value: 70.50, unit: 'kg' } };
    const result = validateWeightAttributeJSON(input);
    assertEquals(true, result, 'Valid Weight Attribute JSON', input);
}

function testValidIntensityAttribute() {
    const input = { intensity: { value: 'high' } };
    const result = validateIntensityAttributeJSON(input);
    assertEquals(true, result, 'Valid Intensity Attribute JSON', input);
}

function testValidLevelAttribute() {
    const input = { level: { value: 3 } };
    const result = validateLevelAttributeJSON(input);
    assertEquals(true, result, 'Valid Level Attribute JSON', input);
}

function testValidUserDefinedAttribute() {
    const input = { user_defined_attribute: { name: 'testName', value: 'testVal' } };
    const result = validateUserDefinedAttributeJSON(input);
    assertEquals(true, result, 'Valid User Defined Attribute JSON', input);
}

// Invalid Input due to Improper Data Types
function testInvalidDistanceAttributeType() {
    const input = { distance: { value: 'five', unit: 5 } };
    try {
        validateDistanceAttributeJSON(input);
        assertEquals(false, true, 'Invalid Distance Attribute JSON Type (no error thrown)', input); // Fail if no error
    } catch (error) {
        assertEquals(true, error.message.includes('invalid data type'), 'Invalid Distance Attribute JSON Type', input);
    }
}

function testInvalidTimeAttributeType() {
    const input = { time: { value: 'sixty' } };
    try {
        validateTimeAttributeJSON(input);
        assertEquals(false, true, 'Invalid Time Attribute JSON Type (no error thrown)', input); // Fail if no error
    } catch (error) {
        assertEquals(true, error.message.includes('invalid data type'), 'Invalid Time Attribute JSON Type', input);
    }
}

function testInvalidSetsAttributeType() {
    const input = { sets: { value: 'four' } };
    try {
        validateSetsAttributeJSON(input);
        assertEquals(false, true, 'Invalid Sets Attribute JSON Type (no error thrown)', input); // Fail if no error
    } catch (error) {
        assertEquals(true, error.message.includes('invalid data type'), 'Invalid Sets Attribute JSON Type', input);
    }
}

function testInvalidRepsAttributeType() {
    const input = { reps: { value: 'ten' } };
    try {
        validateRepsAttributeJSON(input);
        assertEquals(false, true, 'Invalid Reps Attribute JSON Type (no error thrown)', input); // Fail if no error
    } catch (error) {
        assertEquals(true, error.message.includes('invalid data type'), 'Invalid Reps Attribute JSON Type', input);
    }
}

function testInvalidWeightAttributeType() {
    const input = { weight: { value: 'seventy', unit: 70 } };
    try {
        validateWeightAttributeJSON(input);
        assertEquals(false, true, 'Invalid Weight Attribute JSON Type (no error thrown)', input); // Fail if no error
    } catch (error) {
        assertEquals(true, error.message.includes('invalid data type'), 'Invalid Weight Attribute JSON Type', input);
    }
}

function testInvalidIntensityAttributeType() {
    const input = { intensity: { value: 5 } };
    try {
        validateIntensityAttributeJSON(input);
        assertEquals(false, true, 'Invalid Intensity Attribute JSON Type (no error thrown)', input); // Fail if no error
    } catch (error) {
        assertEquals(true, error.message.includes('invalid data type'), 'Invalid Intensity Attribute JSON Type', input);
    }
}

function testInvalidLevelAttributeType() {
    const input = { level: { value: 'three' } };
    try {
        validateLevelAttributeJSON(input);
        assertEquals(false, true, 'Invalid Level Attribute JSON Type (no error thrown)', input); // Fail if no error
    } catch (error) {
        assertEquals(true, error.message.includes('invalid data type'), 'Invalid Level Attribute JSON Type', input);
    }
}

function testInvalidUserDefinedAttributeType() {
    const input = { user_defined_attribute: { name: 123, value: {} } };
    try {
        validateUserDefinedAttributeJSON(input);
        assertEquals(false, true, 'Invalid User Defined Attribute JSON Type (no error thrown)', input); // Fail if no error
    } catch (error) {
        assertEquals(true, error.message.includes('invalid data type'), 'Invalid User Defined Attribute JSON Type', input);
    }
}

// Invalid Input due to Null Values
function testInvalidDistanceAttributeNull() {
    const input = { distance: { value: null, unit: 'km' } };
    try {
        validateDistanceAttributeJSON(input);
        assertEquals(false, true, 'Invalid Distance Attribute JSON Null Value (no error thrown)', input); // Fail if no error
    } catch (error) {
        assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid Distance Attribute JSON Null Value', input);
    }
}

function testInvalidTimeAttributeNull() {
    const input = { time: { value: null } };
    try {
        validateTimeAttributeJSON(input);
        assertEquals(false, true, 'Invalid Time Attribute JSON Null Value (no error thrown)', input); // Fail if no error
    } catch (error) {
        assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid Time Attribute JSON Null Value', input);
    }
}

function testInvalidSetsAttributeNull() {
    const input = { sets: { value: null } };
    try {
        validateSetsAttributeJSON(input);
        assertEquals(false, true, 'Invalid Sets Attribute JSON Null Value (no error thrown)', input); // Fail if no error
    } catch (error) {
        assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid Sets Attribute JSON Null Value', input);
    }
}

function testInvalidRepsAttributeNull() {
    const input = { reps: { value: null } };
    try {
        validateRepsAttributeJSON(input);
        assertEquals(false, true, 'Invalid Reps Attribute JSON Null Value (no error thrown)', input); // Fail if no error
    } catch (error) {
        assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid Reps Attribute JSON Null Value', input);
    }
}

function testInvalidWeightAttributeNull() {
    const input = { weight: { value: null, unit: 'kg' } };
    try {
        validateWeightAttributeJSON(input);
        assertEquals(false, true, 'Invalid Weight Attribute JSON Null Value (no error thrown)', input); // Fail if no error
    } catch (error) {
        assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid Weight Attribute JSON Null Value', input);
    }
}

function testInvalidIntensityAttributeNull() {
    const input = { intensity: { value: null } };
    try {
        validateIntensityAttributeJSON(input);
        assertEquals(false, true, 'Invalid Intensity Attribute JSON Null Value (no error thrown)', input); // Fail if no error
    } catch (error) {
        assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid Intensity Attribute JSON Null Value', input);
    }
}

function testInvalidLevelAttributeNull() {
    const input = { level: { value: null } };
    try {
        validateLevelAttributeJSON(input);
        assertEquals(false, true, 'Invalid Level Attribute JSON Null Value (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid Level Attribute JSON Null Value', input);
        }
    }
    
    function testInvalidUserDefinedAttributeNull() {
        const input = { user_defined_attribute: { name: null, value: 'testVal' } };
        try {
            validateUserDefinedAttributeJSON(input);
            assertEquals(false, true, 'Invalid User Defined Attribute JSON Null Value (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid User Defined Attribute JSON Null Value', input);
        }
    }
    
    // Invalid Input due to Undefined Values
    function testInvalidDistanceAttributeUndefined() {
        const input = { distance: { value: undefined, unit: 'km' } };
        try {
            validateDistanceAttributeJSON(input);
            assertEquals(false, true, 'Invalid Distance Attribute JSON Undefined Value (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid Distance Attribute JSON Undefined Value', input);
        }
    }
    
    function testInvalidTimeAttributeUndefined() {
        const input = { time: { value: undefined } };
        try {
            validateTimeAttributeJSON(input);
            assertEquals(false, true, 'Invalid Time Attribute JSON Undefined Value (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid Time Attribute JSON Undefined Value', input);
        }
    }
    
    function testInvalidSetsAttributeUndefined() {
        const input = { sets: { value: undefined } };
        try {
            validateSetsAttributeJSON(input);
            assertEquals(false, true, 'Invalid Sets Attribute JSON Undefined Value (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid Sets Attribute JSON Undefined Value', input);
        }
    }
    
    function testInvalidRepsAttributeUndefined() {
        const input = { reps: { value: undefined } };
        try {
            validateRepsAttributeJSON(input);
            assertEquals(false, true, 'Invalid Reps Attribute JSON Undefined Value (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid Reps Attribute JSON Undefined Value', input);
        }
    }
    
    function testInvalidWeightAttributeUndefined() {
        const input = { weight: { value: undefined, unit: 'kg' } };
        try {
            validateWeightAttributeJSON(input);
            assertEquals(false, true, 'Invalid Weight Attribute JSON Undefined Value (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid Weight Attribute JSON Undefined Value', input);
        }
    }
    
    function testInvalidIntensityAttributeUndefined() {
        const input = { intensity: { value: undefined } };
        try {
            validateIntensityAttributeJSON(input);
            assertEquals(false, true, 'Invalid Intensity Attribute JSON Undefined Value (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid Intensity Attribute JSON Undefined Value', input);
        }
    }
    
    function testInvalidLevelAttributeUndefined() {
        const input = { level: { value: undefined } };
        try {
            validateLevelAttributeJSON(input);
            assertEquals(false, true, 'Invalid Level Attribute JSON Undefined Value (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid Level Attribute JSON Undefined Value', input);
        }
    }
    
    function testInvalidUserDefinedAttributeUndefined() {
        const input = { user_defined_attribute: { name: undefined, value: 'testVal' } };
        try {
            validateUserDefinedAttributeJSON(input);
            assertEquals(false, true, 'Invalid User Defined Attribute JSON Undefined Value (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('null or undefined properties'), 'Invalid User Defined Attribute JSON Undefined Value', input);
        }
    }
    
    // Invalid Input due to Exceeding Boundary Values
    function testInvalidDistanceAttributeBoundaryExceeds() {
        const input = { distance: { value: 123456.78, unit: 'km' } };
        try {
            validateDistanceAttributeJSON(input);
            assertEquals(false, true, 'Invalid Distance Attribute JSON Boundary (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('exceeds allowable limits'), 'Invalid Distance Attribute JSON Boundary (Exceeds)', input);
        }
    }
    
    function testInvalidDistanceAttributeBoundarySubceeds() {
        const input = { distance: { value: -1, unit: 'km' } };
        try {
            validateDistanceAttributeJSON(input);
            assertEquals(false, true, 'Invalid Distance Attribute JSON Boundary (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('subceeds allowable limits'), 'Invalid Distance Attribute JSON Boundary (Subceeds)', input);
        }
    }
    
    function testInvalidWeightAttributeBoundaryExceeds() {
        const input = { weight: { value: 1234.567, unit: 'kg' } };
        try {
            validateWeightAttributeJSON(input);
            assertEquals(false, true, 'Invalid Weight Attribute JSON Boundary (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('exceeds allowable limits'), 'Invalid Weight Attribute JSON Boundary (Exceeds)', input);
        }
    }

    function testInvalidWeightAttributeBoundarySubceeds() {
        const input = { weight: { value: -1, unit: 'kg' } };
        try {
            validateWeightAttributeJSON(input);
            assertEquals(false, true, 'Invalid Weight Attribute JSON Boundary (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('subceeds allowable limits'), 'Invalid Weight Attribute JSON Boundary (Subceeds)', input);
        }
    }

    function testInvalidUserDefinedAttributeBoundaryExceeds() {
        const input = { user_defined_attribute: { name: '123456789012345678901', value: '12345678901' } };
        try {
            validateUserDefinedAttributeJSON(input);
            assertEquals(false, true, 'Invalid User Defined Attribute JSON Boundary (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('exceeds allowable limits'), 'Invalid User Defined Attribute JSON Boundary (Exceeds)', input);
        }
    }

    function testInvalidUserDefinedAttributeBoundarySubceeds() {
        const input = { user_defined_attribute: { name: '', value: '1234567890' } };
        try {
            validateUserDefinedAttributeJSON(input);
            assertEquals(false, true, 'Invalid User Defined Attribute JSON Boundary (no error thrown)', input); // Fail if no error
        } catch (error) {
            assertEquals(true, error.message.includes('subceeds allowable limits'), 'Invalid User Defined Attribute JSON Boundary (Subceeds)', input);
        }
    }
    
    
    // Run All Tests
    function runAllTests() {
        // Valid Input Tests
        runTest('Valid Distance Attribute', testValidDistanceAttribute);
        runTest('Valid Time Attribute', testValidTimeAttribute);
        runTest('Valid Sets Attribute', testValidSetsAttribute);
        runTest('Valid Reps Attribute', testValidRepsAttribute);
        runTest('Valid Weight Attribute', testValidWeightAttribute);
        runTest('Valid Intensity Attribute', testValidIntensityAttribute);
        runTest('Valid Level Attribute', testValidLevelAttribute);
        runTest('Valid User Defined Attribute', testValidUserDefinedAttribute);
    
        // Invalid Input due to Improper Data Types
        runTest('Invalid Distance Attribute Type', testInvalidDistanceAttributeType);
        runTest('Invalid Time Attribute Type', testInvalidTimeAttributeType);
        runTest('Invalid Sets Attribute Type', testInvalidSetsAttributeType);
        runTest('Invalid Reps Attribute Type', testInvalidRepsAttributeType);
        runTest('Invalid Weight Attribute Type', testInvalidWeightAttributeType);
        runTest('Invalid Intensity Attribute Type', testInvalidIntensityAttributeType);
        runTest('Invalid Level Attribute Type', testInvalidLevelAttributeType);
        runTest('Invalid User Defined Attribute Type', testInvalidUserDefinedAttributeType);
    
        // Invalid Input due to Null Values
        runTest('Invalid Distance Attribute Null', testInvalidDistanceAttributeNull);
        runTest('Invalid Time Attribute Null', testInvalidTimeAttributeNull);
        runTest('Invalid Sets Attribute Null', testInvalidSetsAttributeNull);
        runTest('Invalid Reps Attribute Null', testInvalidRepsAttributeNull);
        runTest('Invalid Weight Attribute Null', testInvalidWeightAttributeNull);
        runTest('Invalid Intensity Attribute Null', testInvalidIntensityAttributeNull);
        runTest('Invalid Level Attribute Null', testInvalidLevelAttributeNull);
        runTest('Invalid User Defined Attribute Null', testInvalidUserDefinedAttributeNull);

        // Invalid Input due to Undefined Values
        runTest('Invalid Distance Attribute Undefined', testInvalidDistanceAttributeUndefined);
        runTest('Invalid Time Attribute Undefined', testInvalidTimeAttributeUndefined);
        runTest('Invalid Sets Attribute Undefined', testInvalidSetsAttributeUndefined);
        runTest('Invalid Reps Attribute Undefined', testInvalidRepsAttributeUndefined);
        runTest('Invalid Weight Attribute Undefined', testInvalidWeightAttributeUndefined);
        runTest('Invalid Intensity Attribute Undefined', testInvalidIntensityAttributeUndefined);
        runTest('Invalid Level Attribute Undefined', testInvalidLevelAttributeUndefined);
        runTest('Invalid User Defined Attribute Undefined', testInvalidUserDefinedAttributeUndefined);
    
        // Invalid Input due to Exceeding Boundary Values
        runTest('Invalid Distance Attribute Boundary (Exceeds)', testInvalidDistanceAttributeBoundaryExceeds);
        runTest('Invalid Distance Attribute Boundary (Subceeds)', testInvalidDistanceAttributeBoundarySubceeds);

        runTest('Invalid Weight Attribute Boundary (Exceeds)', testInvalidWeightAttributeBoundaryExceeds);
        runTest('Invalid Weight Attribute Boundary (Subceeds)', testInvalidWeightAttributeBoundarySubceeds);

        runTest('Invalid User Defined Attribute Boundary (Exceeds)', testInvalidUserDefinedAttributeBoundaryExceeds);
        runTest('Invalid User Defined Attribute Boundary (Subceeds)', testInvalidUserDefinedAttributeBoundarySubceeds);

    }
    
    // Run all tests
    runAllTests();
    