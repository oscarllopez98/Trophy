import { 
    retrieveExerciseAttribute,
    retrieveDistanceAttribute,
    retrieveTimeAttribute,
    retrieveRepsAttribute, 
    retrieveSetsAttribute,
    retrieveWeightAttribute,
    retrieveIntensityAttribute,
    retrieveLevelAttribute } from "trophy-database-operations/ExerciseAttributeOperations.mjs";
import { 
    translateExerciseAttributeSQLRowToJSON,
    translateDistanceAttributeSQLRowToJSON,
    translateTimeAttributeSQLRowToJSON,
    translateSetsAttributeSQLRowToJSON,
    translateRepsAttributeSQLRowToJSON,
    translateWeightAttributeSQLRowToJSON,
    translateIntensityAttributeSQLRowToJSON,
    translateLevelAttributeSQLRowToJSON } from "trophy-exercise-data-processing/SQLJSONTranslator.mjs";

import { translateExerciseTypeIDToUnit } from "trophy-exercise-data-processing/ExerciseTypeTranslator.mjs";

export const prepareExerciseResponse = async (exercise, connection) => {
    // Validate that Exercise is defined and not null

    // This is what we will currently have as an Exercise object
    const exerciseObject = {
        id: exercise.exercise_id,
        name: exercise.exercise_name,
        exerciseType: "other", // Default to 'other' until we translate the type we actually have
        attributes: null, // Null until we translate the attributes we have
        duration: null, // Null until we completely remove it
        date: exercise.exercise_datetime_created,
        notes: exercise.exercise_notes,
    };

    // If we have Exercise Attributes
    if (exercise.exercise_attributes_id !== null) {

        // Retrieve Exercise Attributes function
        const exerciseAttributesRow = await retrieveExerciseAttribute(exercise.exercise_attributes_id, connection);

        // Translate the Exercise Row into a JSON format
        const exerciseAttributes = translateExerciseAttributeSQLRowToJSON(exerciseAttributesRow);

        // Object containing all our Attributes
        var attributes = {}

        if (exerciseAttributes.user_defined_attribute_id !== null) {
            // TODO: Implement retrieveUserDefinedAttribute
        }
        if (exerciseAttributes.distance_attribute_id !== null) {
            // Retrieve and Translate the Distance Attribute into JSON
            const distanceAttributeRow = await retrieveDistanceAttribute(exerciseAttributes.distance_attribute_id, connection);
            const distanceAttribute = await translateDistanceAttributeSQLRowToJSON(distanceAttributeRow, connection);

            // Add the Distance Attribute to the Exercise Attributes
            attributes.distance = {
                value: distanceAttribute.distance_attribute_value,
                unit: distanceAttribute.distance_attribute_unit
            }
        }
        if (exerciseAttributes.time_attribute_id !== null) {
            // Retrieve and Translate the Time Attribute into JSON
            const timeAttributeRow = await retrieveTimeAttribute(exerciseAttributes.time_attribute_id, connection);
            const timeAttribute = await translateTimeAttributeSQLRowToJSON(timeAttributeRow, connection);

            // Add the Time Attribute to the Exercise Attributes
            attributes.time = {
                value: timeAttribute.time_attribute_value,
            }
        }
        if (exerciseAttributes.sets_attribute_id !== null) {
            // Retrieve and Translate the Sets Attribute into JSON
            const setsAttributeRow = await retrieveSetsAttribute(exerciseAttributes.sets_attribute_id, connection);
            const setsAttribute = await translateSetsAttributeSQLRowToJSON(setsAttributeRow, connection);

            // Add the Sets Attribute to the Exercise Attributes
            attributes.sets = {
                value: setsAttribute.sets_attribute_value,
            }
        }
        if (exerciseAttributes.reps_attribute_id !== null) {
            // Retrieve and Translate the Reps Attribute into JSON
            const repsAttributeRow = await retrieveRepsAttribute(exerciseAttributes.reps_attribute_id, connection);
            const repsAttribute = await translateRepsAttributeSQLRowToJSON(repsAttributeRow, connection);

            // Add the Reps Attribute to the Exercise Attributes
            attributes.reps = {
                value: repsAttribute.reps_attribute_value,
            }        
        }
        if (exerciseAttributes.weight_attribute_id !== null) {
            // Retrieve and Translate the Weight Attribute into JSON
            const weightAttributeRow = await retrieveWeightAttribute(exerciseAttributes.weight_attribute_id, connection);
            const weightAttribute = await translateWeightAttributeSQLRowToJSON(weightAttributeRow, connection);

            // Add the Weight Attribute to the Exercise Attributes
            attributes.weight = {
                value: weightAttribute.weight_attribute_value,
                unit: weightAttribute.weight_attribute_unit
            }
        }
        if (exerciseAttributes.intensity_attribute_id !== null) {
            // Retrieve and Translate the Intensity Attribute into JSON
            const intensityAttributeRow = await retrieveIntensityAttribute(exerciseAttributes.intensity_attribute_id, connection);
            const intensityAttribute = await translateIntensityAttributeSQLRowToJSON(intensityAttributeRow, connection);

            // Add the Intensity Attribute to the Exercise Attributes
            attributes.intensity = {
                value: intensityAttribute.intensity_attribute_value,
                unit: intensityAttribute.intensity_attribute_unit
            }
        }
        if (exerciseAttributes.level_attribute_id !== null) {
            // Retrieve and Translate the Level Attribute into JSON
            const levelAttributeRow = await retrieveLevelAttribute(exerciseAttributes.level_attribute_id, connection);
            const levelAttribute = await translateLevelAttributeSQLRowToJSON(levelAttributeRow, connection);

            // Add the Level Attribute to the Exercise Attributes
            attributes.level = {
                value: levelAttribute.level_attribute_value,
                unit: levelAttribute.level_attribute_unit
            }
        }

        // Update our object's attributes
        exerciseObject.attributes = attributes;
    }

    // ExerciseType: String - Need to work on this translation
    const exerciseType = await translateExerciseTypeIDToUnit(exercise.exercise_type_id, connection);

    if (exerciseType !== undefined && exerciseType !== null) {
        exerciseObject.exerciseType = exerciseType;
    } else {
        throw new Error("Could not find Exercise Type");
    }

    return exerciseObject;
}

const prepareExerciseAttributes = (exerciseAttributes) => {

}