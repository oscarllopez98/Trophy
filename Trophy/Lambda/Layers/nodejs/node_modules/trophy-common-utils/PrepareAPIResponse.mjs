import { 
    retrieveExerciseAttribute,
    retrieveDistanceAttribute,
    retrieveTimeAttribute,
    retrieveRepsAttribute, 
    retrieveSetsAttribute,
    retrieveWeightAttribute,
    retrieveIntensityAttribute,
    retrieveLevelAttribute } from "trophy-database-operations/ExerciseAttributeOperations.mjs";
import { 
    translateExerciseAttributeSQLRowToJSON,
    translateDistanceAttributeSQLRowToJSON,
    translateTimeAttributeSQLRowToJSON,
    translateSetsAttributeSQLRowToJSON,
    translateRepsAttributeSQLRowToJSON,
    translateWeightAttributeSQLRowToJSON,
    translateIntensityAttributeSQLRowToJSON,
    translateLevelAttributeSQLRowToJSON } from "trophy-exercise-data-processing/SQLJSONTranslator.mjs";

import { translateExerciseTypeIDToUnit } from "trophy-exercise-data-processing/ExerciseTypeTranslator.mjs";

/**
 * Prepares an Exercise object for response, including translating attributes and exercise type.
 * 
 * @param {Object} exercise - The Exercise object to prepare.
 * @param {Object} connection - The database connection object.
 * @returns {Promise<Object>} A Promise that resolves to the prepared Exercise object for response.
 * @throws {Error} If there is an error during attribute translation or if the Exercise type cannot be found.
 */
export const prepareExerciseResponse = async (exercise, connection) => {
    if (!exercise) {
        throw new Error("Exercise is null or undefined");
    }

    const exerciseObject = {
        id: exercise.exercise_id,
        name: exercise.exercise_name,
        exerciseType: "other", // Default to 'other' until we translate the type we actually have
        attributes: null, // Null until we translate the attributes we have
        duration: null, // Null until we completely remove it
        date: exercise.exercise_datetime_created,
        notes: exercise.exercise_notes,
    };

    if (exercise.exercise_attributes_id !== null) {
        const exerciseAttributesRow = await retrieveExerciseAttribute(exercise.exercise_attributes_id, connection);
        const exerciseAttributes = translateExerciseAttributeSQLRowToJSON(exerciseAttributesRow);
        
        const attributes = {};
        const attributePromises = [];

        if (exerciseAttributes.distance_attribute_id !== null) {
            attributePromises.push(
                (async () => {
                    const distanceAttributeRow = await retrieveDistanceAttribute(exerciseAttributes.distance_attribute_id, connection);
                    const distanceAttribute = await translateDistanceAttributeSQLRowToJSON(distanceAttributeRow, connection);
                    attributes.distance = {
                        value: distanceAttribute.distance_attribute_value,
                        unit: distanceAttribute.distance_attribute_unit
                    };
                })()
            );
        }
        if (exerciseAttributes.time_attribute_id !== null) {
            attributePromises.push(
                (async () => {
                    const timeAttributeRow = await retrieveTimeAttribute(exerciseAttributes.time_attribute_id, connection);
                    const timeAttribute = await translateTimeAttributeSQLRowToJSON(timeAttributeRow, connection);
                    attributes.time = {
                        value: timeAttribute.time_attribute_value,
                    };
                })()
            );
        }
        if (exerciseAttributes.sets_attribute_id !== null) {
            attributePromises.push(
                (async () => {
                    const setsAttributeRow = await retrieveSetsAttribute(exerciseAttributes.sets_attribute_id, connection);
                    const setsAttribute = await translateSetsAttributeSQLRowToJSON(setsAttributeRow, connection);
                    attributes.sets = {
                        value: setsAttribute.sets_attribute_value,
                    };
                })()
            );
        }
        if (exerciseAttributes.reps_attribute_id !== null) {
            attributePromises.push(
                (async () => {
                    const repsAttributeRow = await retrieveRepsAttribute(exerciseAttributes.reps_attribute_id, connection);
                    const repsAttribute = await translateRepsAttributeSQLRowToJSON(repsAttributeRow, connection);
                    attributes.reps = {
                        value: repsAttribute.reps_attribute_value,
                    };
                })()
            );
        }
        if (exerciseAttributes.weight_attribute_id !== null) {
            attributePromises.push(
                (async () => {
                    const weightAttributeRow = await retrieveWeightAttribute(exerciseAttributes.weight_attribute_id, connection);
                    const weightAttribute = await translateWeightAttributeSQLRowToJSON(weightAttributeRow, connection);
                    attributes.weight = {
                        value: weightAttribute.weight_attribute_value,
                        unit: weightAttribute.weight_attribute_unit
                    };
                })()
            );
        }
        if (exerciseAttributes.intensity_attribute_id !== null) {
            attributePromises.push(
                (async () => {
                    const intensityAttributeRow = await retrieveIntensityAttribute(exerciseAttributes.intensity_attribute_id, connection);
                    const intensityAttribute = await translateIntensityAttributeSQLRowToJSON(intensityAttributeRow, connection);
                    attributes.intensity = {
                        value: intensityAttribute.intensity_attribute_value,
                        unit: intensityAttribute.intensity_attribute_unit
                    };
                })()
            );
        }
        if (exerciseAttributes.level_attribute_id !== null) {
            attributePromises.push(
                (async () => {
                    const levelAttributeRow = await retrieveLevelAttribute(exerciseAttributes.level_attribute_id, connection);
                    const levelAttribute = await translateLevelAttributeSQLRowToJSON(levelAttributeRow, connection);
                    attributes.level = {
                        value: levelAttribute.level_attribute_value,
                        unit: levelAttribute.level_attribute_unit
                    };
                })()
            );
        }

        await Promise.all(attributePromises);

        exerciseObject.attributes = attributes;
    }

    const exerciseType = await translateExerciseTypeIDToUnit(exercise.exercise_type_id, connection);
    if (exerciseType !== undefined && exerciseType !== null) {
        exerciseObject.exerciseType = exerciseType;
    } else {
        throw new Error("Could not find Exercise Type");
    }

    return exerciseObject;
}


// Function to prepare multiple exercise responses
export const prepareMultipleExerciseResponses = async (exercises, connection) => {
    const preparedExercisesPromises = exercises.map(exercise => prepareExerciseResponse(exercise, connection));
    return Promise.all(preparedExercisesPromises);
};