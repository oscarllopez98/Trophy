import {
    DISTANCE_ATTRIBUTE_UNIT_ID_COLUMN, DISTANCE_ATTRIBUTE_UNIT_VALUE_COLUMN, 
    WEIGHT_ATTRIBUTE_UNIT_ID_COLUMN, WEIGHT_ATTRIBUTE_UNIT_VALUE_COLUMN,
    INTENSITY_ATTRIBUTE_VALUE_ID_COLUMN, INTENSITY_ATTRIBUTE_VALUE_COLUMN,
    LEVEL_ATTRIBUTE_VALUE_ID_COLUMN, LEVEL_ATTRIBUTE_VALUE_COLUMN } from '../trophy-common-utils/DatabaseTableFields.mjs';
import { 
    DISTANCE_ATTRIBUTE_UNITS_TABLE,
    WEIGHT_ATTRIBUTE_UNITS_TABLE,
    INTENSITY_ATTRIBUTE_VALUES_TABLE,
    LEVEL_ATTRIBUTE_VALUES_TABLE } from '../trophy-common-utils/DatabaseTables.mjs';

/**
 * Retrieves the ID of a distance attribute unit from the database based on the provided unit string.
 * This function assumes a MySQL connection is already Open.
 * 
 * @param {string} unitString The string representing the distance attribute unit to retrieve the ID for.
 * @param {Connection} connection The MySQL connection object used to execute the database query.
 * @returns {Promise<number|null>} A promise that resolves to the ID of the distance attribute unit if found, otherwise null.
 */
export const retrieveDistanceAttributeUnitID = async (unitString, connection) => {
    try {

        const [rows, fields] = await connection.execute(
            `
            SELECT ${DISTANCE_ATTRIBUTE_UNIT_ID_COLUMN}
            FROM ${ DISTANCE_ATTRIBUTE_UNITS_TABLE } 
            WHERE  ${ DISTANCE_ATTRIBUTE_UNIT_VALUE_COLUMN } = ?
            `,
            [unitString]);

        //Return if any rows were found
        return rows.length > 0 ? rows[0].distance_attribute_unit_id : null;

    } catch(error) {
        console.log("Error",error);
        return null;
    } finally {

    }
}

/**
 * Retrieves the ID of a weight attribute unit from the database based on the provided unit string.
 * This function assumes a MySQL connection is already Open.
 * 
 * @param {string} unitString The string representing the weight attribute unit to retrieve the ID for.
 * @param {Connection} connection The MySQL connection object used to execute the database query.
 * @returns {Promise<number|null>} A promise that resolves to the ID of the weight attribute unit if found, otherwise null.
 */
export const retrieveWeightAttributeUnitID = async (unitString, connection) => {
    try {

        const [rows, fields] = await connection.execute(
            `
            SELECT ${WEIGHT_ATTRIBUTE_UNIT_ID_COLUMN}
            FROM ${ WEIGHT_ATTRIBUTE_UNITS_TABLE } 
            WHERE  ${ WEIGHT_ATTRIBUTE_UNIT_VALUE_COLUMN } = ?
            `,
            [unitString]);

        //Return if any rows were found
        return rows.length > 0 ? rows[0].weight_attribute_unit_id : null;

    } catch(error) {
        console.log("Error",error);
        return null;
    } finally {

    }
}

/**
 * Retrieves the ID of an intensity attribute value from the database based on the provided value string.
 * This function assumes a MySQL connection is already Open.
 * 
 * @param {string} valueString The string representing the intensity attribute value to retrieve the ID for.
 * @param {Connection} connection The MySQL connection object used to execute the database query.
 * @returns {Promise<number|null>} A promise that resolves to the ID of the intensity attribute value if found, otherwise null.
 */
export const retrieveIntensityAttributeValueID = async (valueString, connection) => {
    try {

        const [rows, fields] = await connection.execute(
            `
            SELECT ${INTENSITY_ATTRIBUTE_VALUE_ID_COLUMN}
            FROM ${ INTENSITY_ATTRIBUTE_VALUES_TABLE } 
            WHERE  ${ INTENSITY_ATTRIBUTE_VALUE_COLUMN } = ?
            `,
            [valueString]);

        //Return if any rows were found
        return rows.length > 0 ? rows[0].intensity_attribute_value_id : null;

    } catch(error) {
        console.log("Error",error);
        return null;
    } finally {

    }
}

/**
 * Retrieves the ID of an level attribute value from the database based on the provided value string.
 * This function assumes a MySQL connection is already Open.
 * 
 * @param {string} valueString The string representing the level attribute value to retrieve the ID for.
 * @param {Connection} connection The MySQL connection object used to execute the database query.
 * @returns {Promise<number|null>} A promise that resolves to the ID of the level attribute value if found, otherwise null.
 */
export const retrieveLevelAttributeValueID = async (valueString, connection) => {
    try {

        const [rows, fields] = await connection.execute(
            `
            SELECT ${LEVEL_ATTRIBUTE_VALUE_ID_COLUMN}
            FROM ${ LEVEL_ATTRIBUTE_VALUES_TABLE } 
            WHERE  ${ LEVEL_ATTRIBUTE_VALUE_COLUMN } = ?
            `,
            [valueString]);

        //Return if any rows were found
        return rows.length > 0 ? rows[0].level_attribute_value_id : null;

    } catch(error) {
        console.log("Error",error);
        return null;
    } finally {

    }
}