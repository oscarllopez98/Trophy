import { v4 as uuidv4 } from 'uuid';
import { ERROR } from '../trophy-common-utils/Errors.mjs';
import { validateExerciseParameters } from '../trophy-exercise-helpers/ExerciseParametersValidation.mjs'
import { validateExerciseJSON } from '../trophy-exercise-helpers/ExerciseJSONValidation.mjs';

import { retrieveExerciseTypeValueID } from '../trophy-database-operations/ExerciseTypeOperations.mjs';
import { 
    createExerciseAttributeWithJSON, updateExerciseAttribute, deleteExerciseAttribute } from '../trophy-database-operations/ExerciseAttributeOperations.mjs';
import {
    translateExerciseSQLRowToJSON,
    translateExerciseAttributeSQLRowToJSON } from '../trophy-exercise-data-processing/SQLJSONTranslator.mjs'
import { EXERCISES_TABLE } from '../trophy-common-utils/DatabaseTables.mjs';
import { 
    EXERCISE_ID_COLUMN, 
    USER_ID_COLUMN, 
    EXERCISE_NAME_COLUMN, 
    EXERCISE_TYPE_ID_COLUMN, 
    EXERCISE_ATTRIBUTES_ID_COLUMN, 
    EXERCISE_DATETIME_CREATED_COLUMN,
    EXERCISE_NOTES_COLUMN, 
    EXERCISE_TRACKING_STATUS_COLUMN } from '../trophy-common-utils/DatabaseTableFields.mjs';

/**
 * Creates a new exercise in the database.
 * 
 * @param {string} userId - The ID of the user creating the exercise.
 * @param {string} exerciseName - The name of the exercise.
 * @param {string} exerciseType - The type of the exercise.
 * @param {string} exerciseAttributesID - The ID of the exercise attributes.
 * @param {string} exerciseNotes - Notes related to the exercise.
 * @param {string} trackExercise - The tracking status of the exercise.
 * @param {Object} connection - The database connection object.
 * @returns {string|boolean} Returns the UUID of the newly created exercise entry if successful, otherwise returns false.
 */
export const createExercise = async (userId, exerciseName, exerciseType, exerciseAttributesID, exerciseNotes, trackExercise, connection) => {
    //Verify we have defined parameters
    if (typeof userId === 'undefined' || typeof exerciseName === 'undefined' || typeof exerciseType === 'undefined' || typeof exerciseAttributesID === 'undefined' || typeof trackExercise === 'undefined' || typeof connection === 'undefined') {
        console.log("Expected defined userId. Actual userId typeof ===", typeof userId);
        console.log("Expected defined exerciseName value. Actual exerciseName typeof ===", typeof exerciseName);
        console.log("Expected defined exerciseType value. Actual exerciseType typeof ===", typeof exerciseType);
        console.log("Expected defined exerciseAttributesID value. Actual exerciseAttributesID typeof ===", typeof exerciseAttributesID);
        console.log("Expected defined exerciseNotes value. Actual exerciseNotes typeof ===", typeof exerciseNotes);
        console.log("Expected defined trackExercise value. Actual connection typeof ===", typeof trackExercise);
        console.log("Expected defined connection value. Actual connection typeof ===", typeof connection);
        throw new Error(ERROR.ERROR_PARAMETER_UNDEFINED);
    }
    //Validate parameters
    if (validateExerciseParameters(userId, exerciseName, exerciseType, exerciseAttributesID, exerciseNotes, trackExercise)) {
        try {

            //Ensure proper structure for any accepted null values
            exerciseAttributesID = exerciseAttributesID ? exerciseAttributesID : null;
            exerciseNotes = exerciseNotes ? exerciseNotes : null;
            const exerciseTypeId = await retrieveExerciseTypeValueID(exerciseType, connection);

            // Prepare statement for storing Exercise UUID as binary(16) data type in SQL table
            let uuid = uuidv4();
            const dateExerciseCreated = new Date();
            
            // Format the date and time as a string in MySQL datetime format
            const formattedDateTime = dateExerciseCreated.toISOString().slice(0, 19).replace('T', ' ');

            //Execute Create operation
            const [rows, fields] = await connection.execute(`
            INSERT INTO ${EXERCISES_TABLE} ( 
                ${EXERCISE_ID_COLUMN},
                ${USER_ID_COLUMN},
                ${EXERCISE_NAME_COLUMN},
                ${EXERCISE_TYPE_ID_COLUMN},
                ${EXERCISE_ATTRIBUTES_ID_COLUMN}, 
                ${EXERCISE_DATETIME_CREATED_COLUMN}, 
                ${EXERCISE_NOTES_COLUMN}, 
                ${EXERCISE_TRACKING_STATUS_COLUMN} )
            VALUES (UNHEX(REPLACE(?, "-", "")), UNHEX(REPLACE(?, "-", "")), ?, ?, UNHEX(REPLACE(?, "-", "")), ?, ?, ?);`,
            [uuid, userId, exerciseName, exerciseTypeId, exerciseAttributesID, formattedDateTime, exerciseNotes, trackExercise]);
        
            if (rows && rows !== null && rows !== undefined) {
                console.log("Exercise Created with UUID:", uuid);
                return uuid;
            } else {
                throw new Error(`${ERROR.ERROR_CREATE_EXERCISE_FAILED} with Created Exercise UUID: ${uuid}.`);
            }
        } catch(error) {
            console.log(`Error Message: ${error.message}`);
            return false;
        }
    } else {
        throw new Error(`${ERROR.ERROR_EXERCISE_PARAMATERS_INVALID} for parameter values:
            userId: ${userId},
            exerciseName: ${exerciseName},
            exerciseType: ${exerciseType},
            exerciseAttributes: ${exerciseAttributesID},
            exerciseNotes: ${exerciseNotes},
            trackingExerciseStatus: ${trackExercise},
        `);
    }

}

/**
 * Retrieves an exercise from the database based on its ID.
 * 
 * @param {string} exerciseId - The ID of the exercise to retrieve.
 * @param {Object} connection - The database connection object.
 * @returns {Object|null} Returns the retrieved exercise object if found, otherwise returns null.
 */
export const retrieveExercise = async (exerciseId, connection) => {
    //Verify we have defined parameters
    if (typeof exerciseId === 'undefined' || typeof connection === 'undefined') {
        console.log("Expected defined exerciseId. Actual exerciseId typeof ===", typeof exerciseId);
        console.log("Expected defined connection value. Actual connection typeof ===", typeof connection);
        throw new Error(ERROR.ERROR_PARAMETER_UNDEFINED);
    }
    console.log("Retrieving with ID: ", exerciseId);
    
    try {

        const [rows, fields] = await connection.execute(
            `
            SELECT *
            FROM ${ EXERCISES_TABLE } 
            WHERE  ${ EXERCISE_ID_COLUMN } = UNHEX(REPLACE(?, "-", ""));
            `,
            [exerciseId]);

        //Return if any rows were found
        // if (rows.length > 0) console.log(`Retrieved Exercise with exerciseID ${exerciseId}:`, rows[0]);
        if (rows && rows.length > 0) {
            return rows.length > 0 ? rows[0] : null;
        } else {
            throw new Error(`${ERROR.ERROR_RETRIEVE_EXERCISE_FAILED} for exercise_id: ${exerciseId}.`);
        }
    } catch(error) {
        console.log("Error Retrieving: ", error)
        throw new Error(error);
    } finally {

    }
}

/**
 * Updates an existing exercise in the database.
 * 
 * @param {string} currentExerciseId - The ID of the exercise to be updated.
 * @param {string} newExerciseId - The new ID for the exercise.
 * @param {string} exerciseName - The new name for the exercise.
 * @param {Object} newExerciseJSON - The new exercise JSON object.
 * @param {string} userId - The ID of the user updating the exercise.
 * @param {string} exerciseDatetimeCreated - The new date and time of exercise creation.
 * @param {string} exerciseNotes - The new notes related to the exercise.
 * @param {string} trackingStatus - The new tracking status of the exercise.
 * @param {Object} connection - The database connection object.
 * @returns {Object|null} Returns the updated exercise object if successful, otherwise returns null.
 */
export const updateExercise = async (currentExerciseId, newExerciseId, exerciseName, newExerciseJSON, userId , exerciseDatetimeCreated, exerciseNotes, trackingStatus, connection) => {
    //Verify we have defined parameters
    if (typeof currentExerciseId === 'undefined' || typeof newExerciseId === 'undefined' || typeof exerciseName === 'undefined' || typeof newExerciseJSON === 'undefined' || typeof userId === 'undefined' || typeof exerciseDatetimeCreated === 'undefined' || typeof exerciseNotes === 'undefined' || typeof trackingStatus === 'undefined' || typeof connection === 'undefined') {
        console.log("Expected defined currentExerciseId. Actual currentExerciseId typeof ===", typeof currentExerciseId);
        console.log("Expected defined newExerciseId value. Actual newExerciseId typeof ===", typeof newExerciseId);
        console.log("Expected defined exerciseName value. Actual exerciseName typeof ===", typeof exerciseName);
        console.log("Expected defined newExerciseJSON value. Actual newExerciseJSON typeof ===", typeof newExerciseJSON);
        console.log("Expected defined userId value. Actual userId typeof ===", typeof userId);
        console.log("Expected defined exerciseDatetimeCreated value. Actual exerciseDatetimeCreated typeof ===", typeof exerciseDatetimeCreated);
        console.log("Expected defined exerciseNotes value. Actual exerciseNotes typeof ===", typeof exerciseNotes);
        console.log("Expected defined trackingStatus value. Actual trackingStatus typeof ===", typeof trackingStatus);
        console.log("Expected defined connection value. Actual connection typeof ===", typeof connection);
        throw new Error(ERROR.ERROR_PARAMETER_UNDEFINED);
    }
    try {
        // Validate the input JSON object
        if (validateExerciseJSON(newExerciseJSON)) {

            // - - - Setup Existing Exercise JSON - - -

            //Get the existing Exercise Row
            let currentExercise = await retrieveExercise(currentExerciseId, connection);

            if (currentExercise !== null && currentExercise !== undefined) {
                currentExercise = translateExerciseSQLRowToJSON(currentExercise);
            } else {
                throw new Error(`${ERROR.ERROR_EXERCISE_COULD_NOT_RETRIEVE}. Attempted with ID:${currentExerciseId}`);
            }

            // Retrieve new exercise type id
            const exerciseTypeValueId = await retrieveExerciseTypeValueID(newExerciseJSON.type, connection);

            // Get comparison results between the objects
            //const comparisonResult = compareAndLogExerciseObjects(currentExercise, newExerciseJSON);

            let exerciseAttributeId = currentExercise.exercise_attributes_id;

            // If new Exercise JSON has a non-null attributes field
            if (newExerciseJSON.attributes) {            
                
                // If we do not have an non-null exercise attributes id entry we can use, create an entry
                if (!exerciseAttributeId) {
                    const uuid = await createExerciseAttributeWithJSON(newExerciseJSON.attributes, connection);
                    if (!uuid) {
                        console.log("Could not update Exercise with new Exercise Attributes. Actual uuid value:",uuid);
                        throw new Error(`${ERROR.ERROR_UPDATE_EXERCISE_FAILED}`);
                    }
                    console.log("Could not find existing attributes. Creating new entry with uuid: ", uuid);
                    exerciseAttributeId = uuid;
                } 
                // Else, we do have a non-null exercise attributes id entry we can use, so update with that value
                else {
                    console.log("Located existing attributes with uuid: ", exerciseAttributeId);
                    const updatedExerciseAttribute = await updateExerciseAttribute(exerciseAttributeId, exerciseAttributeId, newExerciseJSON.attributes, connection);
                    if (!updatedExerciseAttribute) {
                        console.log("Could not update Exercise with new Exercise Attributes. Actual value when attempting to retrieve updated Exercise:",translateExerciseAttributeSQLRowToJSON(updatedExerciseAttribute));
                    } else {
                        console.log("Updated Exercise Attribute: ", updatedExerciseAttribute);
                    }
                }

            } 
            // Else, new Exercise JSON does not have a non-null attributes field
            else {
                // If we have a non-null exercise attributes id entry, delete our Exercise attribute entry
                if (currentExercise.exercise_attributes_id) {
                    const exerciseAttributesDeleted = await deleteExerciseAttribute(currentExercise.exercise_attributes_id, connection)
                    console.log(`Delete Exercise Attributes entry with uuid ${currentExercise.exercise_attributes_id}:`,exerciseAttributesDeleted);
                    if (!exerciseAttributesDeleted) {
                        console.log("Attempted to delete Exercise Attribute with UUID:", currentExercise.exercise_attributes_id);
                        console.log(`${ERROR.ERROR_EXERCISE_ATTRIBUTE_DELETE_FAILED}. Actual Delete Status:`,exerciseAttributesDeleted);
                    } else {
                        console.log("Successfully delete Exercise Attribute entry with UUID:", currentExercise.exercise_attributes_id);
                        exerciseAttributeId = null;
                    }
                }
            }

            // Nice visuals to see what's being updated (from -> to)
            console.log(`\nAttempting to update Exercise with exercise_id: ${newExerciseId}
            ${EXERCISE_ID_COLUMN}:                  ${currentExercise[EXERCISE_ID_COLUMN]} -> ${newExerciseId},
            ${USER_ID_COLUMN}:                      ${currentExercise[USER_ID_COLUMN]} -> ${userId},
            ${EXERCISE_NAME_COLUMN}:                ${currentExercise[EXERCISE_NAME_COLUMN]} -> ${exerciseName},
            ${EXERCISE_TYPE_ID_COLUMN}:             ${currentExercise[EXERCISE_TYPE_ID_COLUMN]} -> ${exerciseTypeValueId},
            ${EXERCISE_ATTRIBUTES_ID_COLUMN}:       ${currentExercise[EXERCISE_ATTRIBUTES_ID_COLUMN]} -> ${exerciseAttributeId},
            ${EXERCISE_DATETIME_CREATED_COLUMN}:    ${currentExercise[EXERCISE_DATETIME_CREATED_COLUMN]} -> ${exerciseDatetimeCreated},
            ${EXERCISE_NOTES_COLUMN}:               ${currentExercise[EXERCISE_NOTES_COLUMN]} -> ${exerciseNotes},
            ${EXERCISE_TRACKING_STATUS_COLUMN}:     ${currentExercise[EXERCISE_TRACKING_STATUS_COLUMN]} -> ${trackingStatus},
            \n`);

            // Execute the SQL update query
            const [rows, fields] = await connection.execute(
                `
                UPDATE ${EXERCISES_TABLE} 
                SET
                    ${EXERCISE_ID_COLUMN} = UNHEX(REPLACE(?, "-", "")),
                    ${USER_ID_COLUMN} = UNHEX(REPLACE(?, "-", "")),
                    ${EXERCISE_NAME_COLUMN} = ?,
                    ${EXERCISE_TYPE_ID_COLUMN} = ?,
                    ${EXERCISE_ATTRIBUTES_ID_COLUMN} = UNHEX(REPLACE(?, "-", "")),
                    ${EXERCISE_DATETIME_CREATED_COLUMN} = ?,
                    ${EXERCISE_NOTES_COLUMN} = ?,
                    ${EXERCISE_TRACKING_STATUS_COLUMN} = ?
                WHERE ${EXERCISE_ID_COLUMN} = UNHEX(REPLACE(?, "-", ""));
                
                `,
                [newExerciseId, userId, exerciseName, exerciseTypeValueId, exerciseAttributeId, exerciseDatetimeCreated, exerciseNotes, trackingStatus, currentExerciseId]
            );
            
            // Check if the update operation affected any rows
            if (rows.affectedRows > 0) {
                // If affected, retrieve the updated row
                const updatedRow = await retrieveExercise(newExerciseId, connection);
                return updatedRow;
            } else {
                // If no rows were affected, throw Error
                throw new Error(`${ERROR.ERROR_RETRIEVE_EXERCISE_FAILED} for exercise_id: ${currentExerciseId}.`);
            }
        } else {
            // Log an error message if the input JSON object is invalid
            console.log("Error: Exercise JSON failed validation.")
            // Return null to indicate that the update failed due to invalid input
            throw new Error(`${ERROR.ERROR_EXERCISE_JSON_INVALID_FORMAT} for exercise_id ${currentExerciseId} with attempted JSON:\n${newExerciseJSON} `);
        }
    } catch(error) {
        console.log("Error Updating: ", error);
        throw new Error(error);
    } finally {

    }
}

/**
 * Deletes an exercise and the children attributes from the database.
 * 
 * @param {string} exerciseId - The ID of the exercise to be deleted.
 * @param {Object} connection - The database connection object.
 * @returns {boolean} Returns true if the exercise is successfully deleted, otherwise returns false.
 */
export const deleteExercise = async (exerciseId, connection) => {
    //Verify we have defined parameters
    if (typeof exerciseId === 'undefined' || typeof connection === 'undefined') {
        console.log("Expected defined exerciseId. Actual exerciseId typeof ===", typeof exerciseId);
        console.log("Expected defined connection value. Actual connection typeof ===", typeof connection);
        throw new Error(ERROR.ERROR_PARAMETER_UNDEFINED);
    }
    try {
        //Retrieve the Exercise from the database and format into JSON
        const retrievedExerciseRow = await retrieveExercise(exerciseId, connection);
        const retrievedExercise = await translateExerciseSQLRowToJSON(retrievedExerciseRow, connection);
   
        // Delete the Exercise Attributes if they exist
        if (retrievedExercise[`${EXERCISE_ATTRIBUTES_ID_COLUMN}`]) {
            await deleteExerciseAttribute(retrievedExercise[`${EXERCISE_ATTRIBUTES_ID_COLUMN}`], connection);
        }

        //TODO: Delete Notes function

        //Finally, delete the overall exercise_attribute
        const [result, fields] = await connection.execute(
            `
            DELETE
            FROM ${EXERCISES_TABLE}
            WHERE ${EXERCISE_ID_COLUMN} = UNHEX(REPLACE(?, "-", ""));
            `,
            [exerciseId]);
        
        // Return true if any rows were affected by the delete operation
        if (result.affectedRows > 0) {
            console.log(`Successfully Deleted Exercise with exercise_id: ${exerciseId}`);
            return true;
        } else {
            // If no rows were affected, throw Error
            throw new Error(`${ERROR.ERROR_DELETE_EXERCISE_FAILED} for exercise_id: ${exerciseId}.`);
        }
    } catch(error) {
        console.log("Error Deleting: ", error);
        throw new Error(error);
    } finally {
    }
}