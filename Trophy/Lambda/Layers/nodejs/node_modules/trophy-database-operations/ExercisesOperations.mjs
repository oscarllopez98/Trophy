import { v4 as uuidv4 } from 'uuid';
import { ERROR } from '../trophy-common-utils/Errors.mjs';
import { validateExerciseParameters } from '../trophy-exercise-helpers/ExerciseParametersValidation.mjs'
import { validateExerciseJSON } from '../trophy-exercise-helpers/ExerciseJSONValidation.mjs';

import { retrieveExerciseTypeValueID } from '../trophy-database-operations/ExerciseTypeOperations.mjs';
import { 
    createExerciseAttributeWithJSON, updateExerciseAttribute, deleteExerciseAttribute } from '../trophy-database-operations/ExerciseAttributeOperations.mjs';
import {
    translateExerciseSQLRowToJSON,
    translateExerciseAttributeSQLRowToJSON } from '../trophy-exercise-data-processing/SQLJSONTranslator.mjs'
import { EXERCISES_TABLE } from '../trophy-common-utils/DatabaseTables.mjs';
import { 
    EXERCISE_ID_COLUMN, 
    USER_ID_COLUMN, 
    EXERCISE_NAME_COLUMN, 
    EXERCISE_TYPE_ID_COLUMN, 
    EXERCISE_ATTRIBUTES_ID_COLUMN, 
    EXERCISE_DATETIME_CREATED_COLUMN,
    EXERCISE_NOTES_COLUMN, 
    EXERCISE_TRACKING_STATUS_COLUMN } from '../trophy-common-utils/DatabaseTableFields.mjs';

/**
 * Create method that does nothing
 */
const createExercises = async () => {
    // Not yet implemented as of May 21 2024
}

/**
 * Retrieves all exercises for a given user ID from the database.
 * 
 * This function takes a user ID and a database connection object, verifies the parameters,
 * and executes a query to fetch exercises associated with the given user ID. If no exercises
 * are found, or if an error occurs during the database query, appropriate errors are thrown.
 * 
 * @param {string} userId - The ID of the user whose exercises are to be retrieved. This should be a non-undefined string.
 * @param {object} connection - The database connection object used to execute the query. This should be a non-undefined object.
 * @returns {Promise<object|null>} - Returns a promise that resolves to the first exercise object if found, or null if no exercises are found.
 * @throws {Error} - Throws an error if the userId or connection parameters are undefined, if an error occurs during the query execution, or if no exercises are found for the given user ID.
 */
export const retrieveAllExercisesForUserId = async (userId, connection) => {
    //Verify we have defined parameters
    if (typeof userId === 'undefined' || typeof connection === 'undefined') {
        console.log("Expected defined userId. Actual userId typeof ===", typeof userId);
        console.log("Expected defined connection value. Actual connection typeof ===", typeof connection);
        throw new Error(ERROR.ERROR_PARAMETER_UNDEFINED);
    }
    console.log("Retrieving with ID: ", userId);
    
    try {

        const [rows, fields] = await connection.execute(
            `
            SELECT *
            FROM ${ EXERCISES_TABLE } 
            WHERE  ${ USER_ID_COLUMN } = UNHEX(REPLACE(?, "-", ""))
            `,
            [userId]);

        //Return if any rows were found
        if (rows && rows.length > 0) {
            return rows.length > 0 ? rows[0] : null;
        } else {
            throw new Error(`${ERROR.ERROR_RETRIEVE_EXERCISE_FAILED} for user_id: ${userId}.`);
        }
    } catch(error) {
        console.log("Error Retrieving: ", error)
        throw new Error(error);
    } finally {

    }
}

/**
 * Retrieves up to 50 exercises for a given user ID from the database.
 * 
 * This function takes a user ID and a database connection object, verifies the parameters,
 * and executes a query to fetch up to 50 exercises associated with the given user ID. 
 * If no exercises are found, or if an error occurs during the database query, appropriate 
 * errors are thrown.
 * 
 * @param {string} userId - The ID of the user whose exercises are to be retrieved. This should be a non-undefined string.
 * @param {object} connection - The database connection object used to execute the query. This should be a non-undefined object.
 * @returns {Promise<object[]|null>} - Returns a promise that resolves to an array of up to 50 exercise objects if found, or null if no exercises are found.
 * @throws {Error} - Throws an error if the userId or connection parameters are undefined, if an error occurs during the query execution, or if no exercises are found for the given user ID.
 */
export const retrieveLimitedExercisesForUserId = async (userId, connection) => {
    // Verify we have defined parameters
    if (typeof userId === 'undefined' || typeof connection === 'undefined') {
        console.log("Expected defined userId. Actual userId typeof ===", typeof userId);
        console.log("Expected defined connection value. Actual connection typeof ===", typeof connection);
        throw new Error(ERROR.ERROR_PARAMETER_UNDEFINED);
    }
    console.log("Retrieving with ID: ", userId);
    
    try {
        const [rows, fields] = await connection.execute(
            `
            SELECT *
            FROM ${ EXERCISES_TABLE } 
            WHERE ${ USER_ID_COLUMN } = UNHEX(REPLACE(?, "-", ""))
            LIMIT 50
            `,
            [userId]);

        // Return the rows if any were found
        if (rows && rows.length > 0) {
            return rows;
        } else {
            throw new Error(`${ERROR.ERROR_RETRIEVE_EXERCISE_FAILED} for user_id: ${userId}.`);
        }
    } catch(error) {
        console.log("Error Retrieving: ", error);
        throw new Error(error);
    } finally {
        // Optional cleanup can be performed here if needed
    }
}


/**
 * Update method that does nothing
 */
export const updateExercises = async () => {
    // Not yet implemented as of May 21 2024
}

/**
 * Delete method that does nothing
 */
export const deleteExercises = async () => {
    // Not yet implemented as of May 21 2024
}