import { 
    DISTANCE_ATTRIBUTE_UNIT_ID_COLUMN, DISTANCE_ATTRIBUTE_UNIT_VALUE_COLUMN,
    WEIGHT_ATTRIBUTE_UNIT_ID_COLUMN, WEIGHT_ATTRIBUTE_UNIT_VALUE_COLUMN,
    INTENSITY_ATTRIBUTE_VALUE_ID_COLUMN, INTENSITY_ATTRIBUTE_VALUE_COLUMN,
    LEVEL_ATTRIBUTE_VALUE_ID_COLUMN, LEVEL_ATTRIBUTE_VALUE_COLUMN } 
    from '../trophy-common-utils/DatabaseTableFields.mjs';
import { 
    DISTANCE_ATTRIBUTE_UNITS_TABLE,
    WEIGHT_ATTRIBUTE_UNITS_TABLE,
    INTENSITY_ATTRIBUTE_VALUES_TABLE,
    LEVEL_ATTRIBUTE_VALUES_TABLE } 
    from '../trophy-common-utils/DatabaseTables.mjs'

/**
 * Translates a distance attribute unit ID to its corresponding unit string by querying the database.
 * This function assumes a MySQL connection is already Open.
 * 
 * @param {number} unitId The ID of the distance attribute unit to translate.
 * @returns {Promise<string>} A promise that resolves to the unit string corresponding to the provided unit ID.
 * @throws {Error} If an error occurs during the translation process.
 */
export const translateDistanceAttributeUnitIDToUnit = async (unitId, connection) => {
    try {

        const [rows, fields] = await connection.execute(
            `
            SELECT ${DISTANCE_ATTRIBUTE_UNIT_VALUE_COLUMN}
            FROM ${ DISTANCE_ATTRIBUTE_UNITS_TABLE } 
            WHERE  ${ DISTANCE_ATTRIBUTE_UNIT_ID_COLUMN } = ?
            `,
            [unitId]);

        //Return if any rows were found
        if (rows.length > 0) {
            return rows[0].distance_attribute_unit_value;
        } else {
            throw new Error(`Failed to translate distance attribute id to unit due. No unit_id of '${unitId}' found in the table: `, error.message);
        }

    } catch(error) {
        throw new Error("Failed to translate distance attribute unit id to unit: " + error.message);
    } finally {

    }
}


/**
 * Translates a weight attribute unit ID to its corresponding unit string by querying the database.
 * This function assumes a MySQL connection is already Open.
 * 
 * @param {number} unitId The ID of the weight attribute unit to translate.
 * @returns {Promise<string>} A promise that resolves to the unit string corresponding to the provided unit ID.
 * @throws {Error} If an error occurs during the translation process.
 */
export const translateWeightAttributeUnitIDToUnit = async (unitId, connection) => {
    try {

        const [rows, fields] = await connection.execute(
            `
            SELECT ${ WEIGHT_ATTRIBUTE_UNIT_VALUE_COLUMN }
            FROM ${ WEIGHT_ATTRIBUTE_UNITS_TABLE } 
            WHERE  ${ WEIGHT_ATTRIBUTE_UNIT_ID_COLUMN } = ?
            `,
            [unitId]);

        //Return if any rows were found
        if (rows.length > 0) {
            return rows[0].weight_attribute_unit_value;
        } else {
            throw new Error(`Failed to translate weight attribute id to unit due. No unit_id of '${unitId}' found in the table: `, error.message);
        }

    } catch(error) {
        throw new Error("Failed to translate weight attribute unit id to unit: " + error.message);
    } finally {

    }
}

/**
 * Translates a intensity attribute value ID to its corresponding unit string by querying the database.
 * This function assumes a MySQL connection is already Open.
 * 
 * @param {number} valueId The ID of the intensity attribute value to translate.
 * @returns {Promise<string>} A promise that resolves to the unit string corresponding to the provided unit ID.
 * @throws {Error} If an error occurs during the translation process.
 */
export const translateIntensityAttributeValueIDToValue = async (valueId, connection) => {
    try {

        const [rows, fields] = await connection.execute(
            `
            SELECT ${INTENSITY_ATTRIBUTE_VALUE_COLUMN}
            FROM ${ INTENSITY_ATTRIBUTE_VALUES_TABLE } 
            WHERE  ${ INTENSITY_ATTRIBUTE_VALUE_ID_COLUMN } = ?
            `,
            [valueId]);

        //Return if any rows were found
        if (rows.length > 0) {
            return rows[0].intensity_attribute_value;
        } else {
            throw new Error(`Failed to translate intensity attribute id to unit due. No value_id of '${valueId}' found in the table: `, error.message);
        }

    } catch(error) {
        throw new Error("Failed to translate intensity attribute value id to unit: " + error.message);
    } finally {

    }
}

/**
 * Translates a level attribute value ID to its corresponding unit string by querying the database.
 * This function assumes a MySQL connection is already Open.
 * 
 * @param {number} valueId The ID of the level attribute value to translate.
 * @returns {Promise<string>} A promise that resolves to the unit string corresponding to the provided unit ID.
 * @throws {Error} If an error occurs during the translation process.
 */
export const translateLevelAttributeValueIDToValue = async (valueId, connection) => {
    try {

        const [rows, fields] = await connection.execute(
            `
            SELECT ${LEVEL_ATTRIBUTE_VALUE_COLUMN}
            FROM ${ LEVEL_ATTRIBUTE_VALUES_TABLE } 
            WHERE  ${ LEVEL_ATTRIBUTE_VALUE_ID_COLUMN } = ?
            `,
            [valueId]);

        //Return if any rows were found
        if (rows.length > 0) {
            return rows[0].level_attribute_value;
        } else {
            throw new Error(`Failed to translate level attribute id to unit due. No value_id of '${valueId}' found in the table: `, error.message);
        }

    } catch(error) {
        throw new Error("Failed to translate level attribute value id to unit: " + error.message);
    } finally {

    }
}