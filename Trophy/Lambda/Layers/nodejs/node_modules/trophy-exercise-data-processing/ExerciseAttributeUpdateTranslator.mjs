import {
    updateDistanceAttribute,
    updateTimeAttribute,
    updateSetsAttribute,
    updateRepsAttribute,
    updateWeightAttribute,
    updateIntensityAttribute,
    updateLevelAttribute } from '../trophy-database-operations/ExerciseAttributeOperations.mjs';

/**
 * Translates the comparison result of exercise attributes into a list of attributes to update.
 * 
 * @param {Object} comparisonResultAttributes The object representing the comparison result of exercise attributes.
 * @returns {Array} Returns an array containing the names of attributes that need to be updated.
 */    
export const translateAttributeUpdate = (comparisonResultAttributes) => {

    //List of attributes to update
    const attributesToUpdate = [];

    for (const attributeName in comparisonResultAttributes) {
        const attribute = comparisonResultAttributes[attributeName];
        // If we have defined, non-null, false value for the attribute value property
        if (attribute.value !== null && attribute.value !== undefined && attribute.value === false) {
            attributesToUpdate.push(attributeName);
            continue;
        }
        // If we have defined, non-null, false value for the attribute unit property
        else if (attribute.unit !== null && attribute.unit !== undefined && attribute.unit === fakse) {
            attributesToUpdate.push(attributeName);
            continue;
        }
    }

    return attributesToUpdate;
}

export const translateAttributeUpdateFunctions = (attributesToUpdate) => {

    updateAttributeFunctions = []

    attributesToUpdate.forEach((attributeName) => {
        switch (attributeName) {
            case 'distance':
                updateAttributeFunctions.push(updateDistanceAttribute);
                break;
            case 'time':
                updateAttributeFunctions.push(updateTimeAttribute);
                break;
            case 'sets':
                updateAttributeFunctions.push(updateSetsAttribute);
                break;
            case 'reps':
                updateAttributeFunctions.push(updateRepsAttribute);
                break;
            case 'weight':
                updateAttributeFunctions.push(updateWeightAttribute);
                break;
            case 'intensity':
                updateAttributeFunctions.push(updateIntensityAttribute);
                break;
            case 'level':
                updateAttributeFunctions.push(updateLevelAttribute);
                break;
        }
    });

    return updateAttributeFunctions
}