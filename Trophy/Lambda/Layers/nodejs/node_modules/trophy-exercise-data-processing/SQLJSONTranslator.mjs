import { 
    translateDistanceAttributeUnitIDToUnit, 
    translateWeightAttributeUnitIDToUnit,
    translateIntensityAttributeValueIDToValue,
    translateLevelAttributeValueIDToValue } from '../trophy-exercise-data-processing/ExerciseAttributeUnitTranslator.mjs';

import {
    validateRequiredExerciseFields
} from '../trophy-exercise-helpers/ExerciseJSONValidation.mjs';


import { ERROR } from '../trophy-common-utils/Errors.mjs';


export const translateExerciseJSONToSQLJSON = (exerciseJSON) => {
    
}

/**
 * Translates a row from the exercise table in SQL to a JSON object.
 * Validates the required fields and returns the JSON object if valid.
 * 
 * @param {Object} row - The row from the exercise table in SQL.
 * @returns {Object|null} Returns a JSON object representing the exercise if valid,
 *                        or null if the input row is null.
 * @throws {Error} Throws an error if the required fields are not valid.
 */
export const translateExerciseSQLRowToJSON = (row) => {

    // Store values that are unallowed to be undefined or null
    let exercise_id = row.exercise_id ? row.exercise_id.toString('hex') : null;
    let user_id = row.user_id ? row.user_id.toString('hex') : null;
    let exercise_name = row.exercise_name ? row.exercise_name.toString('hex') : null;
    let exercise_type_id = row.exercise_type_id ? row.exercise_type_id : null;

    let exercise_datetime_created = row.exercise_datetime_created ? row.exercise_datetime_created.toString('hex') : null;
    let exercise_tracking_status = row.exercise_tracking_status ? row.exercise_tracking_status : null;

    const requiredExerciseFieldsObject = {
        exercise_id: exercise_id,
        user_id: user_id,
        exercise_name: exercise_name,
        exercise_type_id: exercise_type_id,
        exercise_datetime_created: exercise_datetime_created,
        exercise_tracking_status: exercise_tracking_status,
    }

    //Ensure that the required fields are valid
    try {
        validateRequiredExerciseFields(requiredExerciseFieldsObject);
    }
    catch (error) {
        console.log(error);
        console.log(error.message);
        throw new Error(ERROR.ERROR_TRANSLATE_EXERCISE_SQL_TO_JSON);
    }

    if (row) {

        const translatedObject = {
            exercise_id: exercise_id,
            user_id: user_id,
            exercise_name: exercise_name,
            exercise_type_id: exercise_type_id,
            exercise_attributes_id: (row.exercise_attributes_id ? row.exercise_attributes_id.toString('hex') : null),
            exercise_datetime_created: exercise_datetime_created,
            exercise_notes: (row.exercise_notes ? row.exercise_notes : null),
            exercise_tracking_status: exercise_tracking_status,
        };
        console.log(`Translated Exercise with exercise_id ${exercise_id}:`, translatedObject);

        return translatedObject;
    } else {
        return null
    }
}

/**
 * Translates a row from a SQL query result representing an exercise attribute to a JSON object.
 * 
 * @param {Object} row The row from the SQL query result.
 * @returns {Object|null} A JSON object representing the exercise attribute if the row is not null, otherwise null.
 */
export const translateExerciseAttributeSQLRowToJSON = (row) => {
    if (row) {
        const translatedObject = {
            exercise_attribute_id: (row.exercise_attribute_id ? row.exercise_attribute_id.toString('hex') : null),
            user_defined_attribute_id: (row.user_defined_attribute_id ? row.user_defined_attribute_id.toString('hex') : null),
            distance_attribute_id: (row.distance_attribute_id ? row.distance_attribute_id.toString('hex') : null),
            time_attribute_id: (row.time_attribute_id ? row.time_attribute_id.toString('hex') : null),
            sets_attribute_id: (row.sets_attribute_id ? row.sets_attribute_id.toString('hex') : null),
            reps_attribute_id: (row.reps_attribute_id ? row.reps_attribute_id.toString('hex') : null),
            weight_attribute_id: (row.weight_attribute_id ? row.weight_attribute_id.toString('hex') : null),
            intensity_attribute_id: (row.intensity_attribute_id ? row.intensity_attribute_id.toString('hex') : null),
            level_attribute_id: (row.level_attribute_id ? row.level_attribute_id.toString('hex') : null),
        };
        console.log(`Translated Exercise Attribute with exercise_attribute_id ${translatedObject.exercise_attribute_id}:`, translatedObject);

        return translatedObject;
    } else {
        return null;
    }
};

/**
 * Translates a row from a SQL query result representing a distance attribute to a JSON object.
 * 
 * @param {Object} row The row from the SQL query result.
 * @param {Object} connection The connection object used to interact with the database.
 * @returns {Object|null} A JSON object representing the distance attribute if the row is not null, otherwise null.
 */
export const translateDistanceAttributeSQLRowToJSON = async (row, connection) => {
    if (row) {

        const distance_attribute_unit = await translateDistanceAttributeUnitIDToUnit(row.distance_attribute_unit_id, connection);

        return {
            distance_attribute_id: row.distance_attribute_id.toString('hex'),
            distance_attribute_value: parseFloat(row.distance_attribute_value),
            distance_attribute_unit: distance_attribute_unit
        };
    } else {
        return null;
    }
};

/**
 * Translates a row from a SQL query result representing a time attribute to a JSON object.
 * 
 * @param {Object} row The row from the SQL query result.
 * @param {Object} connection The connection object used to interact with the database.
 * @returns {Object|null} A JSON object representing the time attribute if the row is not null, otherwise null.
 */
export const translateTimeAttributeSQLRowToJSON = async (row, connection) => {
    if (row) {
        return {
            time_attribute_id: row.time_attribute_id.toString('hex'),
            time_attribute_value: row.time_attribute_seconds_value
        };
    } else {
        return null;
    }
};

/**
 * Translates a row from a SQL query result representing a sets attribute to a JSON object.
 * 
 * @param {Object} row The row from the SQL query result.
 * @param {Object} connection The connection object used to interact with the database.
 * @returns {Object|null} A JSON object representing the sets attribute if the row is not null, otherwise null.
 */
export const translateSetsAttributeSQLRowToJSON = async (row, connection) => {
    if (row) {
        return {
            sets_attribute_id: row.sets_attribute_id.toString('hex'),
            sets_attribute_value: row.sets_attribute_value
        };
    } else {
        return null;
    }
};


/**
 * Translates a row from a SQL query result representing a reps attribute to a JSON object.
 * 
 * @param {Object} row The row from the SQL query result.
 * @param {Object} connection The connection object used to interact with the database.
 * @returns {Object|null} A JSON object representing the reps attribute if the row is not null, otherwise null.
 */
export const translateRepsAttributeSQLRowToJSON = async (row, connection) => {
    if (row) {
        return {
            reps_attribute_id: row.reps_attribute_id.toString('hex'),
            reps_attribute_value: row.reps_attribute_value
        };
    } else {
        return null;
    }
};


/**
 * Translates a row from a SQL query result representing a weight attribute to a JSON object.
 * 
 * @param {Object} row The row from the SQL query result.
 * @param {Object} connection The connection object used to interact with the database.
 * @returns {Object|null} A JSON object representing the weight attribute if the row is not null, otherwise null.
 */
export const translateWeightAttributeSQLRowToJSON = async (row, connection) => {
    if (row) {

        const weight_attribute_unit = await translateWeightAttributeUnitIDToUnit(row.weight_attribute_unit_id, connection);

        return {
            weight_attribute_id: row.weight_attribute_id.toString('hex'),
            weight_attribute_value: parseFloat(row.weight_attribute_value),
            weight_attribute_unit: weight_attribute_unit
        };
    } else {
        return null;
    }
};


/**
 * Translates a row from a SQL query result representing a intensity attribute to a JSON object.
 * 
 * @param {Object} row The row from the SQL query result.
 * @param {Object} connection The connection object used to interact with the database.
 * @returns {Object|null} A JSON object representing the intensity attribute if the row is not null, otherwise null.
 */
export const translateIntensityAttributeSQLRowToJSON = async (row, connection) => {
    if (row) {

        const intensity_attribute_value = await translateIntensityAttributeValueIDToValue(row.intensity_attribute_value_id, connection);

        return {
            intensity_attribute_id: row.intensity_attribute_id.toString('hex'),
            intensity_attribute_value: intensity_attribute_value
        };
    } else {
        return null;
    }
};


/**
 * Translates a row from a SQL query result representing a level attribute to a JSON object.
 * 
 * @param {Object} row The row from the SQL query result.
 * @param {Object} connection The connection object used to interact with the database.
 * @returns {Object|null} A JSON object representing the level attribute if the row is not null, otherwise null.
 */
export const translateLevelAttributeSQLRowToJSON = async (row, connection) => {
    if (row) {

        const level_attribute_value = await translateLevelAttributeValueIDToValue(row.level_attribute_value_id, connection);

        return {
            level_attribute_id: row.level_attribute_id.toString('hex'),
            level_attribute_value: level_attribute_value
        };
    } else {
        return null;
    }
};