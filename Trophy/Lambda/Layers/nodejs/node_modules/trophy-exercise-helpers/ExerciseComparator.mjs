/**
 * Compares two exercise objects and logs any differences in their properties.
 * 
 * @param {Object} obj1 - The first exercise object to compare.
 * @param {Object} obj2 - The second exercise object to compare.
 * @returns {Object|null} Returns an object representing the comparison result,
 *                        or null if either of the input objects is invalid.
 */
export const compareAndLogExerciseObjects = (obj1, obj2) => {
    // Check if both objects are valid and of type object
    if (!obj1 || !obj2 || typeof obj1 !== 'object' || typeof obj2 !== 'object') {
        console.log('Invalid exercise objects provided.');
        return null;
    }

    // Function to compare properties of two objects
    const compareProperties = (source, target, prefix = '') => {
        const result = {};
        // Loop through properties of source object
        for (const [key, value] of Object.entries(source)) {
            if (typeof value === 'object' && value !== null) {
                // Recursively compare nested objects
                result[key] = compareProperties(value, target[key] || {}, `${prefix}${key}.`);
            } else {
                // Check if the property exists in the target object
                result[key] = key in target ? value === target[key] : false;
            }
        }
        return result;
    };

    // Compare obj1 properties with obj2
    const result1 = compareProperties(obj1, obj2);

    // Compare obj2 properties with obj1
    const result2 = compareProperties(obj2, obj1);

    // Merge the comparison results
    const comparisonResult = { ...result1, ...result2 };

    // Print out attribute names that were found to be false
    console.log(`Comparison Results between objects ${obj1.exercise_name} and ${obj2.name}`);
    for (const [key, value] of Object.entries(comparisonResult)) {
        if (!value) {
            console.log(`${key} properties: Not Equal.`);
        }
    }

    return comparisonResult; // Return comparison result
};
