import { ERROR } from '../trophy-common-utils/Errors.mjs';
import { validateExerciseAttributeJSONs } from '../trophy-attribute-helpers/AttributeJSONValidation.mjs';


/**
 * Checks if the provided variable is a valid JSON object.
 * 
 * @param {Object} JSONObject The variable to be checked.
 * @returns {boolean} True if the variable is a valid JSON object, false otherwise.
 */
const isValidJSONObject = (JSONObject) => {
    return typeof JSONObject === 'object' && JSONObject !== null && !Array.isArray(JSONObject);
}

/**
 * Validates the structure and properties of an exercise object.
 * 
 * @param {Object} exerciseObject The object representing the exercise to be validated.
 * @throws {Error} Throws an error if the exercise object is invalid based on specified criteria.
 * @returns {boolean} Returns true if the exercise object is valid, otherwise returns false.
 */
export const validateExerciseJSON = (exerciseObject) => {
    // Validate JSON is Object type
    const validJSONObject = isValidJSONObject(exerciseObject);

    // Validate JSON has appropriate properties and they are not undefined
    const validProperties = 
        exerciseObject?.name !== undefined && 
        exerciseObject?.type !== undefined &&
        exerciseObject?.attributes !== undefined &&
        exerciseObject?.date !== undefined &&
        exerciseObject?.notes !== undefined;

    // Validate JSON properties are of the proper type
    const name = exerciseObject?.name;
    const type = exerciseObject?.type;
    const attributes = exerciseObject?.attributes;
    const date = exerciseObject?.date;
    const notes = exerciseObject?.notes;


    const validPropertyTypes = 
        typeof name === 'string' && 
        typeof type === 'string' &&
        (typeof attributes === 'object' || typeof attributes === null) && 
        typeof date === 'string' &&
        (typeof notes === 'string' || typeof notes === null);
    
    // Group any errors found
    const errors = [];

    // JSON object error
    if (!validJSONObject) errors.push(`${ERROR.ERROR_JSON_INVALID_JSON_OBJECT}. Actual value: ${(typeof exerciseObject)}`);

    // Attributes JSON object error
    if (attributes) {
        try {
            // If we have attributes, we need to validate those:
            validateExerciseAttributeJSONs(attributes);
        } catch(error) {
            //If we have errors, we need to log that
            console.log(error.message);
            errors.push(`${ERROR.ERROR_EXERCISE_ATTRIBUTES_INVALID}`);
        }
    }

    // Property value error
    if (!validProperties) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTIES}.
        Actual Values: 
            name: ${name}
            type: ${type}
            attributes: ${attributes}
            date: ${date}
            notes: ${notes}`
        );
        
    // Property data type error
    if (!validPropertyTypes) errors.push(`${ERROR.ERROR_JSON_INVALID_PROPERTY_TYPES}. 
        Actual Values: 
            name type: ${(typeof name)}
            type type: ${(typeof type)}
            attributes Type: ${(typeof attributes)}
            date Type: ${(typeof date)}
            notes Type: ${(typeof notes)}`
        );

    if (errors.length > 0) {
        throw new Error(`Errors found during Exercise JSON validation: ${errors.join('\n')}`);
    }

    return true;
}

/**
 * Validates the required fields in an exercise object.
 * 
 * @param {Object} requiredExerciseFieldsObject The object containing the required fields for the exercise.
 * @throws {Error} Throws an error if any required field is missing or has a null or undefined value.
 * @returns {boolean} Returns true if all required fields are present and have non-null, non-undefined values.
 */
export const validateRequiredExerciseFields = (requiredExerciseFieldsObject) => {
    // Group any errors found
    const errors = [];

    for (const key in requiredExerciseFieldsObject) {
        if (Object.hasOwnProperty.call(requiredExerciseFieldsObject, key)) {
            const value = requiredExerciseFieldsObject[key];
            if (value === undefined || value === null) {
                errors.push(`${ERROR.ERROR_INVALID}. Actual ${key} value: ${value}`);
            }
        }
    }

    if (errors.length > 0) {
        throw new Error(`Errors found during Exercise Field JSON validation: ${errors.join('\n')}`);
    }

    return true;
}