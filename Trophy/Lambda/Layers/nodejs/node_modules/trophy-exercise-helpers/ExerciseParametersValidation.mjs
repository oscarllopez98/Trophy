/**
 * Validates the parameters of an exercise.
 * 
 * @param {string} userId - The ID of the user associated with the exercise.
 * @param {string} exerciseName - The name of the exercise.
 * @param {string} exerciseType - The type of the exercise.
 * @param {string} exerciseAttributesID - The ID of the exercise attributes.
 * @param {string} exerciseNotes - The notes related to the exercise.
 * @param {boolean} trackExercise - Indicates whether the exercise is to be tracked.
 * @returns {boolean} Returns true if the parameters are valid, otherwise false.
 */
export const validateExerciseParameters = (userId, exerciseName, exerciseType, exerciseAttributesID, exerciseNotes, trackExercise) => {
    //Validate parameters that cannot be null are not null
    let validUserId = validateUserId(userId);
    let validExerciseType = validateExerciseType(exerciseType);
    let validTrackExercise = validateTrackExercise(trackExercise);
    let validExerciseName = validateExerciseName(exerciseName)

    //Append errors if validation fails
    let errors = [];
    if (!validUserId) errors.push(`Actual userId value: ${userId}`);
    if (!validExerciseType) errors.push(`Actual exerciseType value: ${exerciseType}`);
    if (!validTrackExercise) errors.push(`Actual trackExercise value: ${trackExercise}`);
    if (!validExerciseName) errors.push(`Actual exerciseName value: ${exerciseName}`);


    // Loop through the array and print errors
    if (errors.length === 0) {
        console.log("Passed Exercise Parameter Validation");
        return true;
    } else {
        errors.forEach(error => console.log(error));
    }
}


/**
 * Validates the exercise name.
 * 
 * @param {string} exerciseName - The name of the exercise.
 * @returns {boolean} Returns true if the exercise name is valid, otherwise false.
 */
const validateExerciseName = (exerciseName) => {
    if (!exerciseName || exerciseName.length === 0) {
        return false;
    } else {
        return true;
    }
}

/**
 * Validates the user ID.
 * 
 * @param {string} userId - The ID of the user.
 * @returns {boolean} Returns true if the user ID is valid, otherwise false.
 */
const validateUserId = (userId) => {
    if (!userId) {
        return false;
    } else {
        return true;
    }
}

/**
 * Validates the exercise type.
 * 
 * @param {string} exerciseType - The type of the exercise.
 * @returns {boolean} Returns true if the exercise type is valid, otherwise false.
 */
const validateExerciseType = (exerciseType) => {
    if (!exerciseType) {
        return false;
    } else {
        return true;
    }
}

/**
 * Validates whether the exercise is to be tracked.
 * 
 * @param {boolean} trackExercise - Indicates whether the exercise is to be tracked.
 * @returns {boolean} Returns true if the trackExercise parameter is valid, otherwise false.
 */
const validateTrackExercise = (trackExercise) => {
    if (trackExercise === undefined || trackExercise === null) {
        return false;
    } else {
        return true;
    }
}