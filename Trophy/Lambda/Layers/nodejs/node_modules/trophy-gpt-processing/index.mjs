// Helper function to call the OpenAI GPT API
export function callGptApi(input) {

    // Prepare system instructions
    const systemInstructions = `
    System Instructions:

    Here are my Exercise JSON formatting rules:
    1) The response must be in JSON format.
    2) The following properties may be null but not undefined: attributes
    3) The following properties may NOT be null nor undefined: name, notes, type.
        - If the input does not imply nor specify an Exercise name, suggest an appropriate one
        - If the input does not imply nor specify an Exercise type, suggest one from the available list from the JSON format below
        - If the input does not imply nor specify an Exercise type, select the most appropriate one from the available list.    
    4) If the input implies or specifies an Exercise attribute, then the attribute should be set (e.g. 'I ran 5 kilometers' implies a distance attribute with a specified 5 km value and unit, respectively.)
    5) If the input does not imply nor specify an Exercise attribute, then it should be set to null (e.g. "time": null)
    6) Use only the Exercise attributes from the provided JSON Format

    Response with one of the following JSON Formats:

    {
        "exercise": {
            "name": "String value for name of the Exercise",
            "notes": "String value for notes of the Exercise. If not specified, leave as empty String",
            "type": "String value cardio|strength|flexibility|sport|running|other",
            "attributes": {
                "level": {
                    "value": Integer value between 1-9, where 1 and 9 are included
                },
                "distance": {
                    "value": Double value between 0-1000,
                    "unit": "mi|ft|yd|km|m"
                },
                "time": {
                    "value": Integer value between 0 and 24 hours (in seconds)
                },
                "reps": {
                    "value": Integer value between 0-1000
                },
                "sets": {
                    "value": Integer value between 0-1000
                },
                "weight": {
                    "unit": "lb|kg",
                    "value": Double value between 0-1000
                },
                "intensity": {
                    "value": "low|med|high"
                }
            }
        }
    }

    OR if failed

    { "exercise": null, "message": "Reason for why the formatting failed."}
    `;

    // Combine system instructions with user input
    const prompt = `${systemInstructions}\n\nUser Input:\n${userInput}\n`;

    // Set API Key and Options
    const apiKey = process.env.TROPHY_GPT_TEXT_TO_JSON_KEY;
    const options = {
        hostname: 'api.openai.com',
        path: '/v1/engines/davinci-codex/completions',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        }
    };

    // Set POST Data
    const postData = JSON.stringify({
        prompt: input,
        max_tokens: 50
    });


    return new Promise((resolve, reject) => {
        const req = https.request(options, (res) => {
            let data = '';

            res.on('data', (chunk) => {
                data += chunk;
            });

            res.on('end', () => {
                resolve(JSON.parse(data));
            });
        });

        req.on('error', (e) => {
            reject(e.message);
        });

        req.write(postData);
        req.end();
    });
}


// Local Helper function to process the GPT output
export function processGptOutput(gptOutput) {
    // Convert GPT output to the Exercise JSON format
    // Maybe do some validation here?

    return gptOutput; // Example, modify as needed
}


// Local Helper function to invoke the existing putUserExercise Lambda function
export async function invokePutUserExercise(userId, processedJSON) {
    return processedJSON;
    // const lambda = new AWS.Lambda();
    // const params = {
    //     FunctionName: 'putUserExercise', // Replace with your existing Lambda function name or ARN
    //     InvocationType: 'RequestResponse',
    //     Payload: JSON.stringify({
    //         pathParameters: {
    //             userId: userId
    //         },
    //         body: JSON.stringify(processedJSON)
    //     })
    // };

    // const response = await lambda.invoke(params).promise();
    // const payload = JSON.parse(response.Payload);

    // if (response.StatusCode !== 200) {
    //     throw new Error(`putUserExercise invocation failed with status code: ${response.StatusCode}`);
    // }

    // return payload;
}