import { OpenAI } from 'openai';

/**
 * Calls the OpenAI GPT API to format user input into a specific JSON structure for exercises.
 * 
 * @param {string} input - The user's input describing the exercise.
 * @returns {Promise<string>} - The formatted JSON string or an error message.
 * @throws {Error} - If there is an error in calling the OpenAI API.
 */
export async function callGptApi(input) {

    // Prepare system instructions
    const systemInstructions = `
    System Instructions:

    Here are my Exercise JSON formatting rules:
    1) The response must be in JSON format.
    2) The following properties may be null but not undefined: attributes
    3) The following properties may NOT be null nor undefined: name, notes, type.
        - If the input does not imply nor specify an Exercise name, suggest an appropriate one
        - If the input does not imply nor specify an Exercise type, suggest one from the available list from the JSON format below
        - If the input does not imply nor specify an Exercise type, select the most appropriate one from the available list.    
    4) If the input implies or specifies an Exercise attribute, then the attribute should be set (e.g. 'I ran 5 kilometers' implies a distance attribute with a specified 5 km value and unit, respectively.)
    5) If the input does not imply nor specify an Exercise attribute, then it should be set to null (e.g. "time": null)
    6) Use only the Exercise attributes from the provided JSON Format
    7) The 'level' and 'intensity' Exercise attributes should only be non-null if heavily implied or explicitly stated using their available values as key words to look out for
    8) If at least 1 Exercise attribute is implied or explicitly stated, all other unimplied or non-explicitly stated Exercise attributes must either have a value or be null

    Response with one of the following JSON Formats:

    {
        "exercise": {
            "name": "String value for name of the Exercise",
            "notes": "String value for notes of the Exercise. If not specified, leave as empty String",
            "type": "String value cardio|strength|flexibility|sport|running|other",
            "attributes": {
                "level": {
                    "value": Integer value between 1-9, where 1 and 9 are included
                },
                "distance": {
                    "value": Double value between 0-1000,
                    "unit": "mi|ft|yd|km|m"
                },
                "time": {
                    "value": Integer value between 0 and 24 hours (in seconds)
                },
                "reps": {
                    "value": Integer value between 0-1000
                },
                "sets": {
                    "value": Integer value between 0-1000
                },
                "weight": {
                    "unit": "lb|kg",
                    "value": Double value between 0-1000
                },
                "intensity": {
                    "value": "low|med|high"
                }
            }
        }
    }

    OR if failed

    { "exercise": null, "message": "Reason for why the formatting failed."}
    `;

    // Set API Key and OpenAI Configuration
    const apiKey = process.env.TROPHY_GPT_TEXT_TO_JSON_KEY;
    const openai = new OpenAI({
        apiKey: apiKey,
    });

    // Establish roles with their respective content
    const messages = [
        { role: "system", content: systemInstructions },
        { role: "user", content: input }
    ];

    // Call openai using our model and the message
    try {
        const response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: messages,
            max_tokens: 250,
        });

        // Return the trimmed content (i.e. return the success/error JSON)
        return response.choices[0].message.content.trim();
    } catch (error) {
        console.error(error.response ? error.response.data : error.message);
        throw new Error('Error calling OpenAI API');
    }
}

/**
 * Processes the GPT output to convert it to the Exercise JSON format.
 * 
 * @param {string} gptOutput - The output from the GPT model as a string.
 * @returns {Object} - The parsed JSON object representing the exercise.
 * @throws {Error} - If the processed JSON is invalid or does not contain the exercise property.
 */
export function processGptOutput(gptOutput) {
    // Convert GPT output to the Exercise JSON format
    let processedGptOutput = JSON.parse(gptOutput);

    // Check if processedJson is not null and has exercise
    if (!processedGptOutput || typeof processedGptOutput.exercise === 'undefined' || processedGptOutput.exercise === null) {
        throw new Error(`${ERROR.ERROR_GPT_RESPONSE_INVALID_PROCESSED_JSON} with details:
            requestBody data value: ${processedGptOutput}
            exercise data type: ${typeof processedGptOutput.exercise}
            exercise data value: ${processedGptOutput.exercise}
        `);
    }

    return processedGptOutput; // Example, modify as needed
}